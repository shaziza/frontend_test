{"ast":null,"code":"import merge from 'lodash/merge';\nimport mergeWith from 'lodash/mergeWith';\nimport databaseReducer from './database';\nimport helperReducer from './helper';\nimport historyReducer from './history';\nimport { REQUEST_DATA, DATA_REMOVE, RESPONSE_DATA_ADD, RESPONSE_DATA_REPLACE, RESPONSE_DATA_NONE, RESPONSE_AUTH_USER, RESPONSE_FAIL, RESET_ON_PAGE, MODAL_OPEN_INFO, MODAL_OPEN_WITH_PARAMS, MODAL_OPEN, MODAL_CLOSE, CLEAR_ERRORS, CHANGE_RESULT, GEO_CHANGE, GEO_COORDS_CHANGE, SET_CURRENCY, SET_UPDATE_INFO, SET_LAST_ERROR, SET_GEO_LIST, SET_AUTH_USER, START_FETCH, STOP_FETCH } from '../actions/actionsTypes';\n\nconst entitiesReducer = (state = [], action) => {\n  switch (action.type) {\n    case RESPONSE_DATA_REPLACE:\n    case RESPONSE_DATA_ADD:\n    case RESPONSE_DATA_NONE:\n    case RESPONSE_AUTH_USER:\n      return merge({}, state, action.response.data.entities);\n\n    default:\n      return state;\n  }\n};\n/**\n * Creates array of fetched results - array with ids of entities\n * @param  {Object} [state={}] [description]\n * @param  {[type]} action     [description]\n * @return {[type]}            [description]\n */\n\n\nconst resultReducer = (state = {}, action) => {\n  let new_state = Object.assign({}, state);\n  let ids = [];\n\n  switch (action.type) {\n    case RESET_ON_PAGE:\n      console.trace(\"DEPRECATED\");\n      return Object.assign({}, state, {\n        [action.key]: []\n      });\n\n    case RESPONSE_DATA_ADD:\n      console.trace(\"DEPRECATED\");\n      return mergeWith(state, action.response.data.result);\n\n    case DATA_REMOVE:\n      console.trace(\"DEPRECATED\");\n\n      for (let i in new_state[action.key][action.category_id]) {\n        if (action.ids.indexOf(new_state[action.key][action.category_id][i]) === -1) {\n          ids.push(new_state[action.key][action.category_id][i]);\n        }\n      }\n\n      new_state[action.key][action.category_id] = ids;\n      return new_state;\n\n    case RESPONSE_DATA_REPLACE:\n      return Object.assign({}, state, action.response.data.result);\n\n    case CHANGE_RESULT:\n      return Object.assign({}, state, {\n        [action.key]: action.ids\n      });\n\n    case RESPONSE_DATA_NONE:\n    default:\n      return state;\n  }\n};\n\nconst fetchedReducer = (state = {}, action) => {\n  switch (action.type) {\n    case REQUEST_DATA:\n    case START_FETCH:\n      return merge({}, state, {\n        [action.key]: true\n      });\n\n    case STOP_FETCH:\n    case RESPONSE_DATA_ADD:\n    case RESPONSE_DATA_REPLACE:\n    case RESPONSE_DATA_NONE:\n    case RESPONSE_FAIL:\n      return merge({}, state, {\n        [action.key]: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst lastIdsReducer = (state = {}, action) => {\n  switch (action.type) {\n    case RESPONSE_DATA_ADD:\n    case RESPONSE_DATA_REPLACE:\n    case RESPONSE_DATA_NONE:\n      return Object.assign({}, state, {\n        [action.key]: action.response.last_id\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst allReducer = (state = {}, action) => {\n  switch (action.type) {\n    case RESPONSE_DATA_REPLACE:\n      return Object.assign({}, state, {\n        [action.key]: action.response.all_count || null\n      });\n\n    case RESET_ON_PAGE:\n      return Object.assign({}, state, {\n        [action.key]: null\n      });\n\n    default:\n      return state;\n  }\n}; // const onPageReducer = (state = {}, action) => {\n//   let data, per_page;\n//   switch (action.type) {\n//     case RESET_ON_PAGE:\n//       return merge({}, state, {\n//         [action.key]: action.per_page || 20\n//       });\n//     case RESPONSE_DATA_REPLACE:\n//       data = action.response.data.result[action.key];\n//       return merge({}, state, {\n//         [action.key]: data.length\n//       });\n//     case RESPONSE_DATA_ADD:\n//       data = action.response.data.result[action.key];\n//       per_page = state[action.key] + data.length;\n//       return merge({}, state, {\n//         [action.key]: per_page\n//       });\n//     case RESPONSE_DATA_NONE:\n//     default:\n//       return state;\n//   }\n// }\n\n\nconst authReducer = (state = null, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER:\n      return action.id;\n\n    case RESPONSE_AUTH_USER:\n      return action.response.data.result.users[0];\n\n    case RESPONSE_FAIL:\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nconst modalsReducer = (state = {}, action) => {\n  switch (action.type) {\n    case MODAL_OPEN_WITH_PARAMS:\n      return merge({}, state, {\n        [action.modal_key]: Object.assign({\n          active: true\n        }, action.params)\n      });\n\n    case MODAL_OPEN_INFO:\n      return merge({}, state, {\n        [action.modal_key]: {\n          type: action.modal_type,\n          active: true,\n          options: action.options\n        }\n      });\n\n    case MODAL_OPEN:\n      return merge({}, state, {\n        [action.modal_key]: true\n      });\n\n    case MODAL_CLOSE:\n      return merge({}, state, {\n        [action.modal_key]: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst errorsReducer = (state = {}, action) => {\n  switch (action.type) {\n    case RESPONSE_FAIL:\n      if (action.main) {\n        return {\n          status: action.error_status,\n          text: action.error\n        };\n      } else {\n        return state;\n      }\n\n    case RESPONSE_DATA_ADD:\n    case RESPONSE_DATA_REPLACE:\n    case RESPONSE_DATA_NONE:\n    case RESPONSE_AUTH_USER:\n    case CLEAR_ERRORS:\n      return {};\n\n    default:\n      return state;\n  }\n};\n\nconst currencyReducer = (state = {}, action) => {\n  switch (action.type) {\n    case SET_CURRENCY:\n      return {\n        id: action.id\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst environmentReducer = (state = {\n  user: {},\n  messages: {},\n  menu: {}\n}, action) => {\n  let new_state = Object.assign({}, state);\n\n  switch (action.type) {\n    case SET_UPDATE_INFO:\n      new_state.updates = Object.assign({}, new_state.updates, {\n        [action.platform]: action.version\n      });\n      return new_state;\n\n    case SET_LAST_ERROR:\n      new_state.lastError = action.text;\n      return new_state;\n\n    default:\n      return state;\n  }\n};\n\nexport default ((state = {}, action) => {\n  return {\n    ssrInfo: state.ssrInfo === undefined ? {\n      available: false\n    } : state.ssrInfo,\n    isClient: state.isClient === undefined ? true : state.isClient,\n    entities: entitiesReducer(state.entities, action),\n    result: resultReducer(state.result, action),\n    fetched: fetchedReducer(state.fetched, action),\n    lastIds: lastIdsReducer(state.lastIds, action),\n    all: allReducer(state.all, action),\n    authUser: authReducer(state.authUser, action),\n    modals: modalsReducer(state.modals, action),\n    errors: errorsReducer(state.errors, action),\n    currency: currencyReducer(state.currency, action),\n    environment: environmentReducer(state.environment, action),\n    database: databaseReducer(state.database, action),\n    helper: helperReducer(state.helper, action),\n    history: historyReducer(state.history, action)\n  };\n});","map":{"version":3,"sources":["/home/aziza/reactapp/src/reducers/app.js"],"names":["merge","mergeWith","databaseReducer","helperReducer","historyReducer","REQUEST_DATA","DATA_REMOVE","RESPONSE_DATA_ADD","RESPONSE_DATA_REPLACE","RESPONSE_DATA_NONE","RESPONSE_AUTH_USER","RESPONSE_FAIL","RESET_ON_PAGE","MODAL_OPEN_INFO","MODAL_OPEN_WITH_PARAMS","MODAL_OPEN","MODAL_CLOSE","CLEAR_ERRORS","CHANGE_RESULT","GEO_CHANGE","GEO_COORDS_CHANGE","SET_CURRENCY","SET_UPDATE_INFO","SET_LAST_ERROR","SET_GEO_LIST","SET_AUTH_USER","START_FETCH","STOP_FETCH","entitiesReducer","state","action","type","response","data","entities","resultReducer","new_state","Object","assign","ids","console","trace","key","result","i","category_id","indexOf","push","fetchedReducer","lastIdsReducer","last_id","allReducer","all_count","authReducer","id","users","modalsReducer","modal_key","active","params","modal_type","options","errorsReducer","main","status","error_status","text","error","currencyReducer","environmentReducer","user","messages","menu","updates","platform","version","lastError","ssrInfo","undefined","available","isClient","fetched","lastIds","all","authUser","modals","errors","currency","environment","database","helper","history"],"mappings":"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","sourcesContent":["import merge from 'lodash/merge';\nimport mergeWith from 'lodash/mergeWith';\nimport databaseReducer from './database'\nimport helperReducer from './helper'\nimport historyReducer from './history'\n\nimport {\n\tREQUEST_DATA,\n\tDATA_REMOVE,\n\tRESPONSE_DATA_ADD,\n\tRESPONSE_DATA_REPLACE,\n\tRESPONSE_DATA_NONE,\n\tRESPONSE_AUTH_USER,\n\tRESPONSE_FAIL,\n\tRESET_ON_PAGE,\n\tMODAL_OPEN_INFO,\n\tMODAL_OPEN_WITH_PARAMS,\n\tMODAL_OPEN,\n\tMODAL_CLOSE,\n\tCLEAR_ERRORS,\n\tCHANGE_RESULT,\n\tGEO_CHANGE,\n\tGEO_COORDS_CHANGE,\n\tSET_CURRENCY,\n\tSET_UPDATE_INFO,\n\tSET_LAST_ERROR,\n\tSET_GEO_LIST,\n\tSET_AUTH_USER,\n\tSTART_FETCH,\n\tSTOP_FETCH,\n} from '../actions/actionsTypes';\nconst entitiesReducer = ( state = [], action ) => {\n\tswitch( action.type ) {\n\t\tcase RESPONSE_DATA_REPLACE:\n\t\tcase RESPONSE_DATA_ADD:\n\t\tcase RESPONSE_DATA_NONE:\n\t\tcase RESPONSE_AUTH_USER:\n\t\t\treturn merge( {}, state, action.response.data.entities );\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n/**\n * Creates array of fetched results - array with ids of entities\n * @param  {Object} [state={}] [description]\n * @param  {[type]} action     [description]\n * @return {[type]}            [description]\n */\nconst resultReducer = (state = {}, action) => {\n  let new_state = Object.assign({}, state);\n  let ids = [];\n  switch (action.type) {\n    case RESET_ON_PAGE:\n\t\t\tconsole.trace(\"DEPRECATED\");\n      return Object.assign({}, state, {\n        [action.key]: []\n      });\n    case RESPONSE_DATA_ADD:\n\t\t\tconsole.trace(\"DEPRECATED\");\n      return mergeWith(state, action.response.data.result);\n    case DATA_REMOVE:\n\t\t\tconsole.trace(\"DEPRECATED\");\n      for (let i in new_state[action.key][action.category_id]) {\n        if (action.ids.indexOf(new_state[action.key][action.category_id][i]) === -1) {\n          ids.push(new_state[action.key][action.category_id][i])\n        }\n      }\n      new_state[action.key][action.category_id] = ids;\n      return new_state;\n    case RESPONSE_DATA_REPLACE:\n      return Object.assign({}, state, action.response.data.result);\n    case CHANGE_RESULT:\n      return Object.assign({}, state, {\n        [action.key]: action.ids\n      });\n    case RESPONSE_DATA_NONE:\n    default:\n      return state;\n  }\n}\n\nconst fetchedReducer = ( state = {}, action ) =>\n{\n    switch( action.type )\n    {\n        case REQUEST_DATA:\n\t\t\t\tcase START_FETCH:\n            return merge( {}, state, { [ action.key ]: true } );\n\t\t\t\tcase STOP_FETCH:\n        case RESPONSE_DATA_ADD:\n        case RESPONSE_DATA_REPLACE:\n        case RESPONSE_DATA_NONE:\n        case RESPONSE_FAIL:\n            return merge( {}, state, { [ action.key ]: false } );\n        default:\n            return state;\n    }\n}\n\n\nconst lastIdsReducer = ( state = {}, action ) =>\n{\n    switch( action.type )\n    {\n        case RESPONSE_DATA_ADD:\n        case RESPONSE_DATA_REPLACE:\n        case RESPONSE_DATA_NONE:\n            return Object.assign( {}, state, { [ action.key ]: action.response.last_id } );\n        default:\n            return state;\n    }\n}\n\nconst allReducer = ( state = {}, action ) =>\n{\n    switch( action.type )\n    {\n        case RESPONSE_DATA_REPLACE:\n            return Object.assign( {}, state, { [ action.key ]: action.response.all_count || null } );\n        case RESET_ON_PAGE:\n            return Object.assign( {}, state, { [ action.key ]: null } );\n        default:\n            return state;\n    }\n}\n// const onPageReducer = (state = {}, action) => {\n//   let data, per_page;\n//   switch (action.type) {\n//     case RESET_ON_PAGE:\n//       return merge({}, state, {\n//         [action.key]: action.per_page || 20\n//       });\n//     case RESPONSE_DATA_REPLACE:\n//       data = action.response.data.result[action.key];\n//       return merge({}, state, {\n//         [action.key]: data.length\n//       });\n//     case RESPONSE_DATA_ADD:\n//       data = action.response.data.result[action.key];\n//       per_page = state[action.key] + data.length;\n//       return merge({}, state, {\n//         [action.key]: per_page\n//       });\n//     case RESPONSE_DATA_NONE:\n//     default:\n//       return state;\n//   }\n// }\nconst authReducer = ( state = null, action ) => {\n\tswitch( action.type ) {\n\t\tcase SET_AUTH_USER:\n\t\t\treturn action.id;\n\t\tcase RESPONSE_AUTH_USER:\n\t\t\treturn action.response.data.result.users[ 0 ];\n\t\tcase RESPONSE_FAIL:\n\t\t\treturn state;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\nconst modalsReducer = (state = {\n \n}, action) => {\n  switch (action.type) {\n    case MODAL_OPEN_WITH_PARAMS:\n      return merge({}, state, {\n        [action.modal_key]: Object.assign({\n          active: true\n        }, action.params)\n      });\n    case MODAL_OPEN_INFO:\n      return merge({}, state, {\n        [action.modal_key]: {\n          type: action.modal_type,\n          active: true,\n          options: action.options\n        }\n      });\n    case MODAL_OPEN:\n      return merge({}, state, {\n        [action.modal_key]: true\n      });\n    case MODAL_CLOSE:\n      return merge({}, state, {\n        [action.modal_key]: false\n      });\n    default:\n      return state;\n  }\n}\n\nconst errorsReducer = ( state = {}, action ) =>\n{\n    switch( action.type )\n    {\n        case RESPONSE_FAIL:\n            if ( action.main )\n            {\n                return {\n                    status: action.error_status,\n                    text: action.error,\n                };\n            }\n            else\n            {\n                return state;\n            }\n        case RESPONSE_DATA_ADD:\n        case RESPONSE_DATA_REPLACE:\n        case RESPONSE_DATA_NONE:\n        case RESPONSE_AUTH_USER:\n        case CLEAR_ERRORS:\n            return {};\n        default:\n            return state;\n    }\n}\nconst currencyReducer = ( state = {}, action ) => {\n\tswitch (action.type) {\n\t\tcase SET_CURRENCY:\n\t\t\treturn {id: action.id}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\nconst environmentReducer = ( state = {\n\tuser: {},\n\tmessages: {},\n\tmenu: {},\n}, action ) => {\n\tlet new_state = Object.assign({}, state);\n\tswitch (action.type) {\n\t\tcase SET_UPDATE_INFO:\n\t\t\tnew_state.updates = Object.assign({}, new_state.updates, {\n\t\t\t\t[action.platform]: action.version\n\t\t\t})\n\t\t\treturn new_state;\n\t\tcase SET_LAST_ERROR:\n\t\t\tnew_state.lastError = action.text\n\t\t\treturn new_state;\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default ( state = {}, action ) => {\n\treturn {\n\t\tssrInfo:\t\t\t\tstate.ssrInfo === undefined ? {available: false} : state.ssrInfo,\n\t\tisClient:\t\t\t\tstate.isClient === undefined ? true : state.isClient,\n\t\tentities:\t\t\t\tentitiesReducer( state.entities, action ),\n\t\tresult:\t\t\t\t\tresultReducer( state.result, action ),\n\t\tfetched:\t\t\t\tfetchedReducer( state.fetched, action ),\n\t\tlastIds:\t\t\t\tlastIdsReducer( state.lastIds, action ),\n\t\tall:\t\t\t\t\t\tallReducer( state.all, action ),\n\t\tauthUser:\t\t\t\tauthReducer( state.authUser, action ),\n\t\tmodals:\t\t\t\t\tmodalsReducer( state.modals, action ),\n\t\terrors:\t\t\t\t\terrorsReducer( state.errors, action ),\n\t\tcurrency:\t\t\t\tcurrencyReducer(state.currency, action),\n\t\tenvironment:\t\tenvironmentReducer(state.environment, action),\n\t\tdatabase:\t\t\t\tdatabaseReducer(state.database, action),\n\t\thelper:\t\t\t\t\thelperReducer(state.helper, action),\n\t\thistory:\t\t\t\thistoryReducer(state.history, action)\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}