{"ast":null,"code":"import { UPDATE_IN_FILELOADER, ADD_TO_DATABASE, RESPONSE_AUTH_USER, REMOVE_FROM_DATABASE, APPEND_LIST_TO_DATABASE, PREPAND_LIST_TO_DATABASE, UPDATE_IN_DATABASE_BY_ID, MERGE_ENTITIES_IN_DATABASE, SET_IN_DATABASE_BY_PATH, APPEND_IN_DATABASE_BY_PATH, PREPEND_IN_DATABASE_BY_PATH, REMOVE_IN_DATABASE_BY_PATH, MAKE_INDEX_IN_DATABASE_BY_PATH } from '../actions/actionsTypes';\nimport { USERS_KEY } from '../actions/keys';\nimport { prependToPathFromObjectToValue, appendToPathFromObjectToValue, assignToPathFromObjectToValue, removeKeyFromPathInObject, getPathFromObject, appendInObject, buildIndexOfKeys } from \"../helpers\";\n/**\n * Массив для построения списка соответсвий между id и номерами в массиве\n * Структура:\n * {name}: {fields}\n * name - имя сущности\n * fields - массив полей по которым строится индекс внутри основного поля, если 1, то строить по всем полям\n * @type {Object}\n */\n\nexport const withKeys = {\n  messages: ['messages']\n};\n\nconst databaseReducer = (state = {\n  [USERS_KEY]: {}\n}, action) => {\n  let new_state = { ...state\n  };\n  let key, id, userID, user, index;\n\n  switch (action.type) {\n    case MERGE_ENTITIES_IN_DATABASE:\n      [USERS_KEY].forEach(key => {\n        if (action.entities[key]) {\n          new_state[key] = appendInObject(new_state[key], action.entities[key], {\n            deep_level: 1\n          });\n        }\n      });\n      return new_state;\n\n    case SET_IN_DATABASE_BY_PATH:\n      return Object.assign({}, state, assignToPathFromObjectToValue(new_state, action.path, action.data));\n\n    case APPEND_IN_DATABASE_BY_PATH:\n      return Object.assign({}, state, appendToPathFromObjectToValue(new_state, action.path, action.data, action.options));\n\n    case PREPEND_IN_DATABASE_BY_PATH:\n      return Object.assign({}, state, prependToPathFromObjectToValue(new_state, action.path, action.data));\n\n    case REMOVE_IN_DATABASE_BY_PATH:\n      return Object.assign({}, state, removeKeyFromPathInObject(new_state, action.path, action.key));\n\n    case MAKE_INDEX_IN_DATABASE_BY_PATH:\n      index = buildIndexOfKeys(getPathFromObject(state, action.path, []), action.key);\n      return Object.assign({}, state, assignToPathFromObjectToValue(new_state, `keys_list.${action.path}`, index));\n\n    case ADD_TO_DATABASE:\n      new_state[action.entity][action.field] = action.data;\n\n      if (withKeys[action.entity]) {\n        new_state.keys_list[action.entity][action.field] = {};\n\n        if (withKeys[action.entity] === 1) {\n          new_state.keys_list[action.entity][action.field] = makeListOfKeys(action.data);\n        } else {\n          for (key of withKeys[action.entity]) {\n            new_state.keys_list[action.entity][action.field][key] = makeListOfKeys(action.data[key]);\n          }\n        }\n      }\n\n      return new_state;\n\n    case APPEND_LIST_TO_DATABASE:\n      if (withKeys[action.entity]) {\n        if (withKeys[action.entity] === 1) {\n          console.info(APPEND_LIST_TO_DATABASE, 'NOT IMPLEMENTED for this entity');\n        } else {\n          for (key of withKeys[action.entity]) {\n            new_state[action.entity][action.field][key] = [...state[action.entity][action.field][key], ...action.data[key]];\n            new_state.keys_list[action.entity][action.field][key] = makeListOfKeys(new_state[action.entity][action.field][key]);\n          }\n        }\n      } else {\n        console.info(APPEND_LIST_TO_DATABASE, 'NEED FIXES');\n        new_state[action.entity][action.field] = Array.isArray(action.data) ? [...new_state[action.entity][action.field], ...action.data] : Object.assign(new_state[action.entity][action.field], action.data);\n      }\n\n      return new_state;\n\n    case PREPAND_LIST_TO_DATABASE:\n      if (withKeys[action.entity]) {\n        for (key of withKeys[action.entity]) {\n          new_state[action.entity][action.field][key] = [...action.data[key], ...state[action.entity][action.field][key]];\n          new_state.keys_list[action.entity][action.field][key] = makeListOfKeys(new_state[action.entity][action.field][key]);\n        }\n      } else {\n        console.info(PREPAND_LIST_TO_DATABASE, 'NEED FIXES');\n        new_state[action.entity][action.field] = Object.assign({}, new_state[action.entity][action.field], action.data);\n      }\n\n      return new_state;\n\n    case REMOVE_FROM_DATABASE:\n      delete new_state[action.entity][action.field];\n      return new_state;\n\n    case UPDATE_IN_DATABASE_BY_ID:\n      id = new_state.keys_list[action.entity][action.field][action.key][action.id];\n      new_state[action.entity][action.field][action.key][id] = action.data;\n      new_state.keys_list[action.entity][action.field][action.key][action.data.id] = id;\n      delete new_state.keys_list[action.entity][action.field][action.key][action.id];\n      return new_state;\n\n    case UPDATE_IN_FILELOADER:\n      if (action.state === 'error') {\n        return state;\n      } else if (action.state === 'loaded') {\n        return state;\n      } else if (action.state === 'ready') {\n        // eslint-disable-next-line\n        let i = 0; // eslint-disable-next-line\n\n        const files = getPathFromObject(new_state, action.destination);\n\n        if (files) {\n          for (i = 0; i < files.length; i++) {\n            if (files[i].id === action.id) {\n              files[i] = action.file;\n              break;\n            }\n          }\n\n          if (i === files.length) {\n            files.push(action.file);\n          }\n\n          return Object.assign({}, new_state, assignToPathFromObjectToValue(new_state, action.destination, files));\n        } else {\n          return Object.assign({}, new_state, prependToPathFromObjectToValue(new_state, action.destination, [action.file]));\n        }\n      } else {\n        return Object.assign({}, new_state, prependToPathFromObjectToValue(new_state, action.destination, [action.file]));\n      }\n\n    case RESPONSE_AUTH_USER:\n      userID = action.response.data.result.users[0];\n      user = action.response.data.entities.users[userID];\n      new_state.im = user;\n      return new_state;\n\n    default:\n      return state;\n  }\n};\n\nconst makeListOfKeys = (list, key = 'id') => {\n  let ids = {};\n\n  for (let i = 0; i < list.length; i++) {\n    ids[list[i][key]] = i;\n  }\n\n  return ids;\n};\n\nexport default databaseReducer;","map":{"version":3,"sources":["/home/aziza/reactapp/src/reducers/database.js"],"names":["UPDATE_IN_FILELOADER","ADD_TO_DATABASE","RESPONSE_AUTH_USER","REMOVE_FROM_DATABASE","APPEND_LIST_TO_DATABASE","PREPAND_LIST_TO_DATABASE","UPDATE_IN_DATABASE_BY_ID","MERGE_ENTITIES_IN_DATABASE","SET_IN_DATABASE_BY_PATH","APPEND_IN_DATABASE_BY_PATH","PREPEND_IN_DATABASE_BY_PATH","REMOVE_IN_DATABASE_BY_PATH","MAKE_INDEX_IN_DATABASE_BY_PATH","USERS_KEY","prependToPathFromObjectToValue","appendToPathFromObjectToValue","assignToPathFromObjectToValue","removeKeyFromPathInObject","getPathFromObject","appendInObject","buildIndexOfKeys","withKeys","messages","databaseReducer","state","action","new_state","key","id","userID","user","index","type","forEach","entities","deep_level","Object","assign","path","data","options","entity","field","keys_list","makeListOfKeys","console","info","Array","isArray","i","files","destination","length","file","push","response","result","users","im","list","ids"],"mappings":"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","sourcesContent":["import {\n\tUPDATE_IN_FILELOADER,\n\tADD_TO_DATABASE,\n\tRESPONSE_AUTH_USER,\n\tREMOVE_FROM_DATABASE,\n\tAPPEND_LIST_TO_DATABASE,\n\tPREPAND_LIST_TO_DATABASE,\n\tUPDATE_IN_DATABASE_BY_ID,\n\tMERGE_ENTITIES_IN_DATABASE,\n\tSET_IN_DATABASE_BY_PATH,\n\tAPPEND_IN_DATABASE_BY_PATH,\n\tPREPEND_IN_DATABASE_BY_PATH,\n\tREMOVE_IN_DATABASE_BY_PATH,\n\tMAKE_INDEX_IN_DATABASE_BY_PATH,\n} from '../actions/actionsTypes';\nimport {\n\tUSERS_KEY\n} from '../actions/keys';\nimport {\n\tprependToPathFromObjectToValue,\n\tappendToPathFromObjectToValue,\n\tassignToPathFromObjectToValue,\n\tremoveKeyFromPathInObject,\n\tgetPathFromObject,\n\tappendInObject,\n\tbuildIndexOfKeys\n} from \"../helpers\";\n\n/**\n * Массив для построения списка соответсвий между id и номерами в массиве\n * Структура:\n * {name}: {fields}\n * name - имя сущности\n * fields - массив полей по которым строится индекс внутри основного поля, если 1, то строить по всем полям\n * @type {Object}\n */\nexport const withKeys = {\n\tmessages: ['messages'],\n};\nconst databaseReducer = (state = {\n\t[USERS_KEY]: {},\n}, action) => {\n\tlet new_state = {...state};\n\tlet key, id, userID, user, index;\n\tswitch (action.type) {\n\t\tcase MERGE_ENTITIES_IN_DATABASE:\n\t\t\t[\n\t\t\t\tUSERS_KEY,\n\t\t\t].forEach(key => {\n\t\t\t\tif (action.entities[key]) {\n\t\t\t\t\tnew_state[key] = appendInObject(new_state[key], action.entities[key], {deep_level: 1});\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn new_state;\n\t\tcase SET_IN_DATABASE_BY_PATH:\n\t\t\treturn Object.assign({}, state, assignToPathFromObjectToValue(new_state, action.path, action.data));\n\t\tcase APPEND_IN_DATABASE_BY_PATH:\n\t\t\treturn Object.assign({}, state, appendToPathFromObjectToValue(new_state, action.path, action.data, action.options));\n\t\tcase PREPEND_IN_DATABASE_BY_PATH:\n\t\t\treturn Object.assign({}, state, prependToPathFromObjectToValue(new_state, action.path, action.data));\n\t\tcase REMOVE_IN_DATABASE_BY_PATH:\n\t\t\treturn Object.assign({}, state, removeKeyFromPathInObject(new_state, action.path, action.key));\n\t\tcase MAKE_INDEX_IN_DATABASE_BY_PATH:\n\t\t\tindex = buildIndexOfKeys(getPathFromObject(state, action.path, []), action.key);\n\t\t\treturn Object.assign({}, state, assignToPathFromObjectToValue(new_state, `keys_list.${action.path}`, index));\n\t\tcase ADD_TO_DATABASE:\n\t\t\tnew_state[action.entity][action.field] = action.data;\n\t\t\tif (withKeys[action.entity]) {\n\t\t\t\tnew_state.keys_list[action.entity][action.field] = {};\n\t\t\t\tif (withKeys[action.entity] === 1) {\n\t\t\t\t\tnew_state.keys_list[action.entity][action.field] = makeListOfKeys(action.data);\n\t\t\t\t} else {\n\t\t\t\t\tfor (key of withKeys[action.entity]) {\n\t\t\t\t\t\tnew_state.keys_list[action.entity][action.field][key] = makeListOfKeys(action.data[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new_state;\n\t\tcase APPEND_LIST_TO_DATABASE:\n\t\t\tif (withKeys[action.entity]) {\n\t\t\t\tif (withKeys[action.entity] === 1) {\n\t\t\t\t\tconsole.info(APPEND_LIST_TO_DATABASE, 'NOT IMPLEMENTED for this entity');\n\t\t\t\t} else {\n\t\t\t\t\tfor (key of withKeys[action.entity]) {\n\t\t\t\t\t\tnew_state[action.entity][action.field][key] = [...state[action.entity][action.field][key], ...action.data[key]];\n\t\t\t\t\t\tnew_state.keys_list[action.entity][action.field][key] = makeListOfKeys(new_state[action.entity][action.field][key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.info(APPEND_LIST_TO_DATABASE, 'NEED FIXES');\n\t\t\t\tnew_state[action.entity][action.field] = Array.isArray(action.data) ? [...new_state[action.entity][action.field], ...action.data] : Object.assign(new_state[action.entity][action.field], action.data);\n\t\t\t}\n\t\t\treturn new_state;\n\t\tcase PREPAND_LIST_TO_DATABASE:\n\t\t\tif (withKeys[action.entity]) {\n\t\t\t\tfor (key of withKeys[action.entity]) {\n\t\t\t\t\tnew_state[action.entity][action.field][key] = [...action.data[key], ...state[action.entity][action.field][key]];\n\t\t\t\t\tnew_state.keys_list[action.entity][action.field][key] = makeListOfKeys(\n\t\t\t\t\t\tnew_state[action.entity][action.field][key]\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.info(PREPAND_LIST_TO_DATABASE, 'NEED FIXES');\n\t\t\t\tnew_state[action.entity][action.field] = Object.assign({}, new_state[action.entity][action.field], action.data);\n\t\t\t}\n\t\t\treturn new_state;\n\t\tcase REMOVE_FROM_DATABASE:\n\t\t\tdelete new_state[action.entity][action.field];\n\t\t\treturn new_state;\n\t\tcase UPDATE_IN_DATABASE_BY_ID:\n\t\t\tid = new_state.keys_list[action.entity][action.field][action.key][action.id];\n\t\t\tnew_state[action.entity][action.field][action.key][id] = action.data;\n\t\t\tnew_state.keys_list[action.entity][action.field][action.key][action.data.id] = id;\n\t\t\tdelete new_state.keys_list[action.entity][action.field][action.key][action.id]\n\t\t\treturn new_state;\n\t\tcase UPDATE_IN_FILELOADER:\n\t\t\tif (action.state === 'error') {\n\t\t\t\treturn state;\n\t\t\t} else if (action.state === 'loaded') {\n\t\t\t\treturn state;\n\t\t\t} else if (action.state === 'ready') {\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\tlet i = 0;\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\tconst files = getPathFromObject(new_state, action.destination)\n\t\t\t\tif (files) {\n\t\t\t\t\tfor (i = 0; i < files.length; i++) {\n\t\t\t\t\t\tif (files[i].id === action.id) {\n\t\t\t\t\t\t\tfiles[i] = action.file;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (i === files.length) {\n\t\t\t\t\t\tfiles.push(action.file)\n\t\t\t\t\t}\n\t\t\t\t\treturn Object.assign({}, new_state, assignToPathFromObjectToValue(new_state, action.destination, files));\n\t\t\t\t} else {\n\t\t\t\t\treturn Object.assign({}, new_state, prependToPathFromObjectToValue(new_state, action.destination, [action.file]));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn Object.assign({}, new_state, prependToPathFromObjectToValue(new_state, action.destination, [action.file]));\n\t\t\t}\n\t\tcase RESPONSE_AUTH_USER:\n\t\t\tuserID = action.response.data.result.users[0];\n\t\t\tuser = action.response.data.entities.users[userID];\n\t\t\tnew_state.im = user;\n\t\t\treturn new_state;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n\nconst makeListOfKeys = (list, key = 'id') => {\n\tlet ids = {};\n\tfor (let i = 0; i < list.length; i++) {\n\t\tids[list[i][key]] = i;\n\t}\n\treturn ids;\n}\n\nexport default databaseReducer;\n"]},"metadata":{},"sourceType":"module"}