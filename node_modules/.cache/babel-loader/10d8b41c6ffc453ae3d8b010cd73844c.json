{"ast":null,"code":"import { normalize, schema } from 'normalizr';\nimport { SET_IN_DATABASE_BY_PATH } from './actionsTypes';\nimport { USERS_KEY, COUNT_PAGES_KEY, POSTS_KEY, COMMENTS_KEY, POST_KEY // KEYS_LIST_KEY\n} from './keys';\nimport { request } from \"./request\";\n/**\n * Устанавливает значение поля в database\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\n\nexport function setInDatabaseByPath(data, path) {\n  return {\n    type: SET_IN_DATABASE_BY_PATH,\n    data,\n    path\n  };\n}\nexport function getUsers(pageNumber) {\n  const url = pageNumber ? `https://gorest.co.in/public-api/users?Page=${pageNumber}` : 'https://gorest.co.in/public-api/users';\n  const keys_path = `${USERS_KEY}`;\n  const keys_path_pages = `${COUNT_PAGES_KEY}.users`;\n  return dispatch => {\n    request(url).then(d => {\n      const data = d.data;\n      const pages = d.meta.pagination;\n      dispatch(setInDatabaseByPath(data, keys_path));\n      dispatch(setInDatabaseByPath(pages, keys_path_pages));\n    });\n  };\n}\nexport function getPosts(id) {\n  const url = `https://gorest.co.in/public-api/users/${id}/posts`;\n  const keys_path = `${POSTS_KEY}`;\n  const keys_path_pages = `${COUNT_PAGES_KEY}.posts`;\n  return dispatch => {\n    request(url).then(d => {\n      const data = d.data;\n      const pages = d.meta.pagination;\n      dispatch(setInDatabaseByPath(data, keys_path));\n      dispatch(setInDatabaseByPath(pages, keys_path_pages));\n    });\n  };\n}\nexport function getPost(id, post_id) {\n  const url = `https://gorest.co.in/public-api/users/${id}/posts`;\n  const keys_path = `${POST_KEY}`;\n  return dispatch => {\n    request(url).then(d => {\n      const data = d.data;\n      console.log(data);\n\n      if (data.length > 0) {\n        const post = new schema.Entity('posts');\n        let list = new schema.Array(post);\n        const normalizedData = normalize(data, list);\n        const item = normalizedData.entities.posts[post_id];\n        console.log(item);\n        dispatch(setInDatabaseByPath(item, keys_path));\n      }\n    });\n  };\n}\nexport function getComments(id) {\n  const url = `https://gorest.co.in/public-api/posts/${id}/comments`;\n  const keys_path = `${COMMENTS_KEY}`;\n  return dispatch => {\n    request(url).then(d => {\n      const data = d.data;\n      dispatch(setInDatabaseByPath(data, keys_path));\n    });\n  };\n}","map":{"version":3,"sources":["/home/aziza/frontend_test/src/actions/actions.js"],"names":["normalize","schema","SET_IN_DATABASE_BY_PATH","USERS_KEY","COUNT_PAGES_KEY","POSTS_KEY","COMMENTS_KEY","POST_KEY","request","setInDatabaseByPath","data","path","type","getUsers","pageNumber","url","keys_path","keys_path_pages","dispatch","then","d","pages","meta","pagination","getPosts","id","getPost","post_id","console","log","length","post","Entity","list","Array","normalizedData","item","entities","posts","getComments"],"mappings":"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","sourcesContent":["import {normalize, schema} from 'normalizr';\nimport {\n    SET_IN_DATABASE_BY_PATH,\n} from './actionsTypes';\nimport {\n\tUSERS_KEY,\n\tCOUNT_PAGES_KEY,\n\tPOSTS_KEY,\n\tCOMMENTS_KEY,\n\tPOST_KEY\n\t// KEYS_LIST_KEY\n} from './keys';\nimport {request} from \"./request\";\n/**\n * Устанавливает значение поля в database\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\nexport function setInDatabaseByPath(data, path) {\n\treturn {\n\t\ttype: SET_IN_DATABASE_BY_PATH,\n\t\tdata, path\n\t};\n}\nexport function getUsers(pageNumber) {\n\tconst url = pageNumber ? `https://gorest.co.in/public-api/users?Page=${pageNumber}` : 'https://gorest.co.in/public-api/users';\n\tconst keys_path = `${USERS_KEY}`;\n\tconst keys_path_pages = `${COUNT_PAGES_KEY}.users`;\n\treturn (dispatch) => {\n\t\trequest(url)\n\t\t.then(d => {\n\t\t\tconst data = d.data;\n\t\t\tconst pages = d.meta.pagination;\n\t\t\tdispatch(setInDatabaseByPath(data, keys_path))\n\t\t\tdispatch(setInDatabaseByPath(pages, keys_path_pages))\n\t\t})\n\t}\n}\nexport function getPosts(id) {\n\tconst url = `https://gorest.co.in/public-api/users/${id}/posts`;\n\tconst keys_path = `${POSTS_KEY}`;\n\tconst keys_path_pages = `${COUNT_PAGES_KEY}.posts`;\n\treturn (dispatch) => {\n\t\trequest(url)\n\t\t.then(d => {\n\t\t\tconst data = d.data;\n\t\t\tconst pages = d.meta.pagination;\n\t\t\tdispatch(setInDatabaseByPath(data, keys_path))\n\t\t\tdispatch(setInDatabaseByPath(pages, keys_path_pages))\n\t\t})\n\t}\n}\nexport function getPost(id, post_id) {\n\tconst url = `https://gorest.co.in/public-api/users/${id}/posts`;\n\tconst keys_path = `${POST_KEY}`;\n\treturn (dispatch) => {\n\t\trequest(url)\n\t\t.then(d => {\n\t\t\tconst data = d.data;\n\t\t\tconsole.log(data);\n\t\t\tif (data.length > 0) {\n\t\t\t\tconst post = new schema.Entity('posts');\n\t\t\t\tlet list = new schema.Array( post );\n\t\t\t\tconst normalizedData = normalize(data, list);\n\t\t\t\tconst item = normalizedData.entities.posts[post_id];\n\t\t\t\tconsole.log(item);\n\t\t\t\tdispatch(setInDatabaseByPath(item, keys_path));\n\t\t\t}\n\t\t})\n\t}\n}\nexport function getComments(id) {\n\tconst url = `https://gorest.co.in/public-api/posts/${id}/comments`;\n\tconst keys_path = `${COMMENTS_KEY}`;\n\treturn (dispatch) => {\n\t\trequest(url)\n\t\t.then(d => {\n\t\t\tconst data = d.data;\n\t\t\tdispatch(setInDatabaseByPath(data, keys_path))\n\t\t})\n\t}\n}"]},"metadata":{},"sourceType":"module"}