{"ast":null,"code":"import merge from 'lodash/merge';\nimport mergeWith from 'lodash/mergeWith';\nimport notificationsReducer from './notifications';\nimport soundsReducer from './sounds';\nimport databaseReducer from './database';\nimport helperReducer from './helper';\nimport historyReducer from './history';\n\nconst entitiesReducer = (state = [], action) => {\n  switch (action.type) {\n    case RESPONSE_DATA_REPLACE:\n    case RESPONSE_DATA_ADD:\n    case RESPONSE_DATA_NONE:\n    case RESPONSE_AUTH_USER:\n      return merge({}, state, action.response.data.entities);\n\n    default:\n      return state;\n  }\n};\n/**\n * Creates array of fetched results - array with ids of entities\n * @param  {Object} [state={}] [description]\n * @param  {[type]} action     [description]\n * @return {[type]}            [description]\n */\n\n\nconst resultReducer = (state = {}, action) => {\n  let new_state = Object.assign({}, state);\n  let ids = [];\n\n  switch (action.type) {\n    case RESET_ON_PAGE:\n      console.trace(\"DEPRECATED\");\n      return Object.assign({}, state, {\n        [action.key]: []\n      });\n\n    case RESPONSE_DATA_ADD:\n      console.trace(\"DEPRECATED\");\n      return mergeWith(state, action.response.data.result, merger);\n\n    case DATA_REMOVE:\n      console.trace(\"DEPRECATED\");\n\n      for (let i in new_state[action.key][action.category_id]) {\n        if (action.ids.indexOf(new_state[action.key][action.category_id][i]) === -1) {\n          ids.push(new_state[action.key][action.category_id][i]);\n        }\n      }\n\n      new_state[action.key][action.category_id] = ids;\n      return new_state;\n\n    case RESPONSE_DATA_REPLACE:\n      return Object.assign({}, state, action.response.data.result);\n\n    case CHANGE_RESULT:\n      return Object.assign({}, state, {\n        [action.key]: action.ids\n      });\n\n    case RESPONSE_DATA_NONE:\n    default:\n      return state;\n  }\n};\n\nconst fetchedReducer = (state = {}, action) => {\n  switch (action.type) {\n    case REQUEST_DATA:\n    case START_FETCH:\n      return merge({}, state, {\n        [action.key]: true\n      });\n\n    case STOP_FETCH:\n    case RESPONSE_DATA_ADD:\n    case RESPONSE_DATA_REPLACE:\n    case RESPONSE_DATA_NONE:\n    case RESPONSE_FAIL:\n      return merge({}, state, {\n        [action.key]: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst lastIdsReducer = (state = {}, action) => {\n  switch (action.type) {\n    case RESPONSE_DATA_ADD:\n    case RESPONSE_DATA_REPLACE:\n    case RESPONSE_DATA_NONE:\n      return Object.assign({}, state, {\n        [action.key]: action.response.last_id\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst allReducer = (state = {}, action) => {\n  switch (action.type) {\n    case RESPONSE_DATA_REPLACE:\n      return Object.assign({}, state, {\n        [action.key]: action.response.all_count || null\n      });\n\n    case RESET_ON_PAGE:\n      return Object.assign({}, state, {\n        [action.key]: null\n      });\n\n    default:\n      return state;\n  }\n}; // const onPageReducer = (state = {}, action) => {\n//   let data, per_page;\n//   switch (action.type) {\n//     case RESET_ON_PAGE:\n//       return merge({}, state, {\n//         [action.key]: action.per_page || 20\n//       });\n//     case RESPONSE_DATA_REPLACE:\n//       data = action.response.data.result[action.key];\n//       return merge({}, state, {\n//         [action.key]: data.length\n//       });\n//     case RESPONSE_DATA_ADD:\n//       data = action.response.data.result[action.key];\n//       per_page = state[action.key] + data.length;\n//       return merge({}, state, {\n//         [action.key]: per_page\n//       });\n//     case RESPONSE_DATA_NONE:\n//     default:\n//       return state;\n//   }\n// }\n\n\nconst authReducer = (state = null, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER:\n      return action.id;\n\n    case RESPONSE_AUTH_USER:\n      return action.response.data.result.users[0];\n\n    case RESPONSE_FAIL:\n      if (action.key === USERS_KEY && [102, 103].includes(action.error_status)) return 0;\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nconst modalsReducer = (state = {\n  [INFO_MODAL_KEY]: {},\n  [IMAGE_MODAL_KEY]: {},\n  [ATTACH_MODAL_KEY]: {}\n}, action) => {\n  switch (action.type) {\n    case MODAL_OPEN_WITH_PARAMS:\n      return merge({}, state, {\n        [action.modal_key]: Object.assign({\n          active: true\n        }, action.params)\n      });\n\n    case MODAL_OPEN_INFO:\n      return merge({}, state, {\n        [action.modal_key]: {\n          type: action.modal_type,\n          active: true,\n          options: action.options\n        }\n      });\n\n    case MODAL_OPEN:\n      return merge({}, state, {\n        [action.modal_key]: true\n      });\n\n    case MODAL_CLOSE:\n      return merge({}, state, {\n        [action.modal_key]: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst errorsReducer = (state = {}, action) => {\n  switch (action.type) {\n    case RESPONSE_FAIL:\n      if (action.main) {\n        return {\n          status: action.error_status,\n          text: action.error\n        };\n      } else {\n        return state;\n      }\n\n    case RESPONSE_DATA_ADD:\n    case RESPONSE_DATA_REPLACE:\n    case RESPONSE_DATA_NONE:\n    case RESPONSE_AUTH_USER:\n    case CLEAR_ERRORS:\n      return {};\n\n    default:\n      return state;\n  }\n};\n\nconst regReducer = (state = {\n  status: REG_INIT_KEY\n}) => {\n  return state;\n};\n\nconst inititialGeo = {\n  lists: {\n    city: [],\n    region: [],\n    country: []\n  }\n};\nconst geoListTypes = {\n  '-1': 'country',\n  1: 'country',\n  2: 'region',\n  3: 'city'\n};\n\nconst geoReducer = (state = inititialGeo, action) => {\n  let new_state = Object.assign({}, state);\n\n  switch (action.type) {\n    case SET_GEO_LIST:\n      for (let i in geoListTypes) {\n        new_state.lists[geoListTypes[i]] = [];\n      }\n\n      for (let i in action.items) {\n        new_state.lists[geoListTypes[action.items[i].type]].push(action.items[i]);\n      }\n\n      return new_state;\n\n    case GEO_CHANGE:\n    case GEO_COORDS_CHANGE:\n      return Object.assign({}, state, action.data);\n\n    default:\n      return state;\n  }\n};\n\nconst currencyReducer = (state = {}, action) => {\n  switch (action.type) {\n    case SET_CURRENCY:\n      return {\n        id: action.id\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst environmentReducer = (state = {\n  user: {},\n  messages: {},\n  menu: {}\n}, action) => {\n  let new_state = Object.assign({}, state);\n\n  switch (action.type) {\n    case SET_UPDATE_INFO:\n      new_state.updates = Object.assign({}, new_state.updates, {\n        [action.platform]: action.version\n      });\n      return new_state;\n\n    case SET_LAST_ERROR:\n      new_state.lastError = action.text;\n      return new_state;\n\n    default:\n      return state;\n  }\n};\n\nexport default ((state = {}, action) => {\n  return {\n    ssrInfo: state.ssrInfo === undefined ? {\n      available: false\n    } : state.ssrInfo,\n    isClient: state.isClient === undefined ? true : state.isClient,\n    entities: entitiesReducer(state.entities, action),\n    result: resultReducer(state.result, action),\n    fetched: fetchedReducer(state.fetched, action),\n    lastIds: lastIdsReducer(state.lastIds, action),\n    all: allReducer(state.all, action),\n    authUser: authReducer(state.authUser, action),\n    modals: modalsReducer(state.modals, action),\n    errors: errorsReducer(state.errors, action),\n    reg: regReducer(state.reg, action),\n    geo: geoReducer(state.geo, action),\n    currency: currencyReducer(state.currency, action),\n    environment: environmentReducer(state.environment, action),\n    database: databaseReducer(state.database, action),\n    helper: helperReducer(state.helper, action),\n    history: historyReducer(state.history, action)\n  };\n});","map":{"version":3,"sources":["/home/aziza/reactapp/src/reducers/app.js"],"names":["merge","mergeWith","notificationsReducer","soundsReducer","databaseReducer","helperReducer","historyReducer","entitiesReducer","state","action","type","RESPONSE_DATA_REPLACE","RESPONSE_DATA_ADD","RESPONSE_DATA_NONE","RESPONSE_AUTH_USER","response","data","entities","resultReducer","new_state","Object","assign","ids","RESET_ON_PAGE","console","trace","key","result","merger","DATA_REMOVE","i","category_id","indexOf","push","CHANGE_RESULT","fetchedReducer","REQUEST_DATA","START_FETCH","STOP_FETCH","RESPONSE_FAIL","lastIdsReducer","last_id","allReducer","all_count","authReducer","SET_AUTH_USER","id","users","USERS_KEY","includes","error_status","modalsReducer","INFO_MODAL_KEY","IMAGE_MODAL_KEY","ATTACH_MODAL_KEY","MODAL_OPEN_WITH_PARAMS","modal_key","active","params","MODAL_OPEN_INFO","modal_type","options","MODAL_OPEN","MODAL_CLOSE","errorsReducer","main","status","text","error","CLEAR_ERRORS","regReducer","REG_INIT_KEY","inititialGeo","lists","city","region","country","geoListTypes","geoReducer","SET_GEO_LIST","items","GEO_CHANGE","GEO_COORDS_CHANGE","currencyReducer","SET_CURRENCY","environmentReducer","user","messages","menu","SET_UPDATE_INFO","updates","platform","version","SET_LAST_ERROR","lastError","ssrInfo","undefined","available","isClient","fetched","lastIds","all","authUser","modals","errors","reg","geo","currency","environment","database","helper","history"],"mappings":"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","sourcesContent":["import merge from 'lodash/merge';\nimport mergeWith from 'lodash/mergeWith';\nimport notificationsReducer from './notifications'\nimport soundsReducer from './sounds'\nimport databaseReducer from './database'\nimport helperReducer from './helper'\nimport historyReducer from './history'\n\nconst entitiesReducer = ( state = [], action ) => {\n\tswitch( action.type ) {\n\t\tcase RESPONSE_DATA_REPLACE:\n\t\tcase RESPONSE_DATA_ADD:\n\t\tcase RESPONSE_DATA_NONE:\n\t\tcase RESPONSE_AUTH_USER:\n\t\t\treturn merge( {}, state, action.response.data.entities );\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n/**\n * Creates array of fetched results - array with ids of entities\n * @param  {Object} [state={}] [description]\n * @param  {[type]} action     [description]\n * @return {[type]}            [description]\n */\nconst resultReducer = (state = {}, action) => {\n  let new_state = Object.assign({}, state);\n  let ids = [];\n  switch (action.type) {\n    case RESET_ON_PAGE:\n\t\t\tconsole.trace(\"DEPRECATED\");\n      return Object.assign({}, state, {\n        [action.key]: []\n      });\n    case RESPONSE_DATA_ADD:\n\t\t\tconsole.trace(\"DEPRECATED\");\n      return mergeWith(state, action.response.data.result, merger);\n    case DATA_REMOVE:\n\t\t\tconsole.trace(\"DEPRECATED\");\n      for (let i in new_state[action.key][action.category_id]) {\n        if (action.ids.indexOf(new_state[action.key][action.category_id][i]) === -1) {\n          ids.push(new_state[action.key][action.category_id][i])\n        }\n      }\n      new_state[action.key][action.category_id] = ids;\n      return new_state;\n    case RESPONSE_DATA_REPLACE:\n      return Object.assign({}, state, action.response.data.result);\n    case CHANGE_RESULT:\n      return Object.assign({}, state, {\n        [action.key]: action.ids\n      });\n    case RESPONSE_DATA_NONE:\n    default:\n      return state;\n  }\n}\n\nconst fetchedReducer = ( state = {}, action ) =>\n{\n    switch( action.type )\n    {\n        case REQUEST_DATA:\n\t\t\t\tcase START_FETCH:\n            return merge( {}, state, { [ action.key ]: true } );\n\t\t\t\tcase STOP_FETCH:\n        case RESPONSE_DATA_ADD:\n        case RESPONSE_DATA_REPLACE:\n        case RESPONSE_DATA_NONE:\n        case RESPONSE_FAIL:\n            return merge( {}, state, { [ action.key ]: false } );\n        default:\n            return state;\n    }\n}\n\n\nconst lastIdsReducer = ( state = {}, action ) =>\n{\n    switch( action.type )\n    {\n        case RESPONSE_DATA_ADD:\n        case RESPONSE_DATA_REPLACE:\n        case RESPONSE_DATA_NONE:\n            return Object.assign( {}, state, { [ action.key ]: action.response.last_id } );\n        default:\n            return state;\n    }\n}\n\nconst allReducer = ( state = {}, action ) =>\n{\n    switch( action.type )\n    {\n        case RESPONSE_DATA_REPLACE:\n            return Object.assign( {}, state, { [ action.key ]: action.response.all_count || null } );\n        case RESET_ON_PAGE:\n            return Object.assign( {}, state, { [ action.key ]: null } );\n        default:\n            return state;\n    }\n}\n// const onPageReducer = (state = {}, action) => {\n//   let data, per_page;\n//   switch (action.type) {\n//     case RESET_ON_PAGE:\n//       return merge({}, state, {\n//         [action.key]: action.per_page || 20\n//       });\n//     case RESPONSE_DATA_REPLACE:\n//       data = action.response.data.result[action.key];\n//       return merge({}, state, {\n//         [action.key]: data.length\n//       });\n//     case RESPONSE_DATA_ADD:\n//       data = action.response.data.result[action.key];\n//       per_page = state[action.key] + data.length;\n//       return merge({}, state, {\n//         [action.key]: per_page\n//       });\n//     case RESPONSE_DATA_NONE:\n//     default:\n//       return state;\n//   }\n// }\nconst authReducer = ( state = null, action ) => {\n\tswitch( action.type ) {\n\t\tcase SET_AUTH_USER:\n\t\t\treturn action.id;\n\t\tcase RESPONSE_AUTH_USER:\n\t\t\treturn action.response.data.result.users[ 0 ];\n\t\tcase RESPONSE_FAIL:\n\t\t\tif (action.key === USERS_KEY && [102, 103].includes(action.error_status))\n\t\t\t\treturn 0;\n\t\t\treturn state;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\nconst modalsReducer = (state = {\n  [INFO_MODAL_KEY]: {},\n  [IMAGE_MODAL_KEY]: {},\n  [ATTACH_MODAL_KEY]: {}\n}, action) => {\n  switch (action.type) {\n    case MODAL_OPEN_WITH_PARAMS:\n      return merge({}, state, {\n        [action.modal_key]: Object.assign({\n          active: true\n        }, action.params)\n      });\n    case MODAL_OPEN_INFO:\n      return merge({}, state, {\n        [action.modal_key]: {\n          type: action.modal_type,\n          active: true,\n          options: action.options\n        }\n      });\n    case MODAL_OPEN:\n      return merge({}, state, {\n        [action.modal_key]: true\n      });\n    case MODAL_CLOSE:\n      return merge({}, state, {\n        [action.modal_key]: false\n      });\n    default:\n      return state;\n  }\n}\n\nconst errorsReducer = ( state = {}, action ) =>\n{\n    switch( action.type )\n    {\n        case RESPONSE_FAIL:\n            if ( action.main )\n            {\n                return {\n                    status: action.error_status,\n                    text: action.error,\n                };\n            }\n            else\n            {\n                return state;\n            }\n        case RESPONSE_DATA_ADD:\n        case RESPONSE_DATA_REPLACE:\n        case RESPONSE_DATA_NONE:\n        case RESPONSE_AUTH_USER:\n        case CLEAR_ERRORS:\n            return {};\n        default:\n            return state;\n    }\n}\n\nconst regReducer = ( state = { status: REG_INIT_KEY } ) => {\n\treturn state;\n}\nconst inititialGeo = {\n\tlists: {\n\t\tcity: [],\n\t\tregion: [],\n\t\tcountry: []\n\t}\n}\nconst geoListTypes = {\n\t'-1': 'country',\n\t1: 'country',\n\t2: 'region',\n\t3: 'city',\n}\nconst geoReducer = (state = inititialGeo, action) => {\n  let new_state = Object.assign({}, state);\n  switch (action.type) {\n    case SET_GEO_LIST:\n      for (let i in geoListTypes) {\n        new_state.lists[geoListTypes[i]] = [];\n      }\n      for (let i in action.items) {\n        new_state.lists[geoListTypes[action.items[i].type]].push(action.items[i]);\n      }\n      return new_state;\n    case GEO_CHANGE:\n    case GEO_COORDS_CHANGE:\n      return Object.assign({}, state, action.data);\n    default:\n      return state;\n  }\n}\nconst currencyReducer = ( state = {}, action ) => {\n\tswitch (action.type) {\n\t\tcase SET_CURRENCY:\n\t\t\treturn {id: action.id}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\nconst environmentReducer = ( state = {\n\tuser: {},\n\tmessages: {},\n\tmenu: {},\n}, action ) => {\n\tlet new_state = Object.assign({}, state);\n\tswitch (action.type) {\n\t\tcase SET_UPDATE_INFO:\n\t\t\tnew_state.updates = Object.assign({}, new_state.updates, {\n\t\t\t\t[action.platform]: action.version\n\t\t\t})\n\t\t\treturn new_state;\n\t\tcase SET_LAST_ERROR:\n\t\t\tnew_state.lastError = action.text\n\t\t\treturn new_state;\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default ( state = {}, action ) => {\n\treturn {\n\t\tssrInfo:\t\t\t\tstate.ssrInfo === undefined ? {available: false} : state.ssrInfo,\n\t\tisClient:\t\t\t\tstate.isClient === undefined ? true : state.isClient,\n\t\tentities:\t\t\t\tentitiesReducer( state.entities, action ),\n\t\tresult:\t\t\t\t\tresultReducer( state.result, action ),\n\t\tfetched:\t\t\t\tfetchedReducer( state.fetched, action ),\n\t\tlastIds:\t\t\t\tlastIdsReducer( state.lastIds, action ),\n\t\tall:\t\t\t\t\t\tallReducer( state.all, action ),\n\t\tauthUser:\t\t\t\tauthReducer( state.authUser, action ),\n\t\tmodals:\t\t\t\t\tmodalsReducer( state.modals, action ),\n\t\terrors:\t\t\t\t\terrorsReducer( state.errors, action ),\n\t\treg:\t\t\t\t\t\tregReducer( state.reg, action ),\n\t\tgeo:\t\t\t\t\t\tgeoReducer( state.geo, action ),\n\t\tcurrency:\t\t\t\tcurrencyReducer(state.currency, action),\n\t\tenvironment:\t\tenvironmentReducer(state.environment, action),\n\t\tdatabase:\t\t\t\tdatabaseReducer(state.database, action),\n\t\thelper:\t\t\t\t\thelperReducer(state.helper, action),\n\t\thistory:\t\t\t\thistoryReducer(state.history, action)\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}