{"ast":null,"code":"import { normalize, schema } from 'normalizr';\nimport { ADD_TO_DATABASE, UPDATE_LIST_IN_DATABASE, PREPAND_LIST_TO_DATABASE, MERGE_ENTITIES_IN_DATABASE, SET_IN_DATABASE_BY_PATH, APPEND_IN_DATABASE_BY_PATH, PREPEND_IN_DATABASE_BY_PATH, REMOVE_IN_DATABASE_BY_PATH, MAKE_INDEX_IN_DATABASE_BY_PATH, REQUEST_DATA } from './actionsTypes';\nimport { USERS_KEY, COUNT_PAGES_KEY, POSTS_KEY, COMMENTS_KEY, POST_KEY // KEYS_LIST_KEY\n} from './keys';\nimport { request } from \"./request\";\n/***DATABASE***/\n\nexport const setFieldInDatabase = (entity, field, data) => {\n  return {\n    type: ADD_TO_DATABASE,\n    entity,\n    field,\n    data\n  };\n};\nexport const appendToListInDatabase = (entity, field, data) => {\n  return {\n    type: UPDATE_LIST_IN_DATABASE,\n    entity,\n    field,\n    data\n  };\n};\nexport const prependToListInDatabase = (entity, field, data) => {\n  return {\n    type: PREPAND_LIST_TO_DATABASE,\n    entity,\n    field,\n    data\n  };\n};\nexport function mergeEntitiesInDB(entities) {\n  return {\n    type: MERGE_ENTITIES_IN_DATABASE,\n    entities\n  };\n}\n/**\n * Устанавливает значение поля в database\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\n\nexport function setInDatabaseByPath(data, path) {\n  return {\n    type: SET_IN_DATABASE_BY_PATH,\n    data,\n    path\n  };\n}\n/**\n * Добавляет (deepMerge) значение поля в database\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\n\nexport function appendInDatabaseByPath(data, path, options) {\n  console.log(data);\n  return {\n    type: APPEND_IN_DATABASE_BY_PATH,\n    data,\n    path,\n    options\n  };\n}\n/**\n * Добавляет значение поля в начало массива расположенного в database по пути path\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\n\nexport function prependInDatabaseByPath(data, path) {\n  return {\n    type: PREPEND_IN_DATABASE_BY_PATH,\n    data,\n    path\n  };\n}\nexport function removeInDatabaseByPath(key, path) {\n  return {\n    type: REMOVE_IN_DATABASE_BY_PATH,\n    key,\n    path\n  };\n}\nexport function makeIndexInDatabaseByPath(path, key) {\n  return {\n    type: MAKE_INDEX_IN_DATABASE_BY_PATH,\n    path,\n    key\n  };\n}\nexport function getUsers(pageNumber) {\n  const url = pageNumber ? `https://gorest.co.in/public-api/users?Page=${pageNumber}` : 'https://gorest.co.in/public-api/users';\n  const keys_path = `${USERS_KEY}`;\n  const keys_path_pages = `${COUNT_PAGES_KEY}.users`;\n  return dispatch => {\n    request(url).then(d => {\n      const data = d.data;\n      const pages = d.meta.pagination;\n      dispatch(setInDatabaseByPath(data, keys_path));\n      dispatch(setInDatabaseByPath(pages, keys_path_pages));\n    });\n  };\n}\nexport function getPosts(id) {\n  const url = `https://gorest.co.in/public-api/users/${id}/posts`;\n  const keys_path = `${POSTS_KEY}`;\n  const keys_path_pages = `${COUNT_PAGES_KEY}.posts`;\n  return dispatch => {\n    request(url).then(d => {\n      const data = d.data;\n      const pages = d.meta.pagination;\n      dispatch(setInDatabaseByPath(data, keys_path));\n      dispatch(setInDatabaseByPath(pages, keys_path_pages));\n    });\n  };\n}\nexport function getPost(id) {\n  const url = `https://gorest.co.in/public-api/users/${id}/posts`;\n  const keys_path = `${POST_KEY}`;\n  return dispatch => {\n    request(url).then(d => {\n      const originalData = d.data;\n      const post = new schema.Entity(POST_KEY, {\n        post: [originalData[0].id]\n      }); // const article = new schema.Entity(POST_KEY, { [originalData[0].id]: post,});\n\n      const normalizedData = normalize(originalData, post);\n      console.log(normalizedData.entities); // dispatch(mergeEntitiesInDB(normalizedData.entities));\n      // let entity = new schema.Entity( POST_KEY );\n      // console.log(entity);\n      // const tt = { [ POST_KEY ]: new schema.Array( entity ) };\n      // console.log(tt);\n\n      console.log(post); // const post = data.filter(k => {if (k.id === id) return k});\n\n      console.log(post);\n      dispatch(setInDatabaseByPath(originalData, keys_path));\n    });\n  };\n}\nexport function getComments(id) {\n  const url = `https://gorest.co.in/public-api/posts/${id}/comments`;\n  const keys_path = `${COMMENTS_KEY}`;\n  return dispatch => {\n    request(url).then(d => {\n      const data = d.data;\n      dispatch(setInDatabaseByPath(data, keys_path));\n    });\n  };\n} // export function addUsers() {\n// \tconst url = 'https://gorest.co.in/public-api/users';\n// \tfetch(url)\n//     .then(response => response.json())\n//     .then(json => json)\n// if (!d.error) {\n// \tdispatch(appendInDatabaseByPath(d, keys_path));\n// }\n// }\n\nexport const requestAction = key => ({\n  type: REQUEST_DATA,\n  key: key\n});","map":{"version":3,"sources":["/home/aziza/reactapp/src/actions/actions.js"],"names":["normalize","schema","ADD_TO_DATABASE","UPDATE_LIST_IN_DATABASE","PREPAND_LIST_TO_DATABASE","MERGE_ENTITIES_IN_DATABASE","SET_IN_DATABASE_BY_PATH","APPEND_IN_DATABASE_BY_PATH","PREPEND_IN_DATABASE_BY_PATH","REMOVE_IN_DATABASE_BY_PATH","MAKE_INDEX_IN_DATABASE_BY_PATH","REQUEST_DATA","USERS_KEY","COUNT_PAGES_KEY","POSTS_KEY","COMMENTS_KEY","POST_KEY","request","setFieldInDatabase","entity","field","data","type","appendToListInDatabase","prependToListInDatabase","mergeEntitiesInDB","entities","setInDatabaseByPath","path","appendInDatabaseByPath","options","console","log","prependInDatabaseByPath","removeInDatabaseByPath","key","makeIndexInDatabaseByPath","getUsers","pageNumber","url","keys_path","keys_path_pages","dispatch","then","d","pages","meta","pagination","getPosts","id","getPost","originalData","post","Entity","normalizedData","getComments","requestAction"],"mappings":"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","sourcesContent":["import {normalize, schema} from 'normalizr';\nimport {\n    ADD_TO_DATABASE,\n    UPDATE_LIST_IN_DATABASE,\n    PREPAND_LIST_TO_DATABASE,\n    MERGE_ENTITIES_IN_DATABASE,\n    SET_IN_DATABASE_BY_PATH,\n    APPEND_IN_DATABASE_BY_PATH,\n    PREPEND_IN_DATABASE_BY_PATH,\n    REMOVE_IN_DATABASE_BY_PATH,\n    MAKE_INDEX_IN_DATABASE_BY_PATH,\n    REQUEST_DATA\n} from './actionsTypes';\nimport {\n\tUSERS_KEY,\n\tCOUNT_PAGES_KEY,\n\tPOSTS_KEY,\n\tCOMMENTS_KEY,\n\tPOST_KEY\n\t// KEYS_LIST_KEY\n} from './keys';\nimport { request } from \"./request\";\n/***DATABASE***/\nexport const setFieldInDatabase = (entity, field, data) => {\n\treturn {\n\t\ttype: ADD_TO_DATABASE,\n\t\tentity,\n\t\tfield,\n\t\tdata,\n\t};\n}\nexport const appendToListInDatabase = (entity, field, data) => {\n\treturn {\n\t\ttype: UPDATE_LIST_IN_DATABASE,\n\t\tentity,\n\t\tfield,\n\t\tdata\n\t};\n}\nexport const prependToListInDatabase = (entity, field, data) => {\n\treturn {\n\t\ttype: PREPAND_LIST_TO_DATABASE,\n\t\tentity,\n\t\tfield,\n\t\tdata\n\t};\n}\n\nexport function mergeEntitiesInDB(entities) {\n\treturn {\n\t\ttype: MERGE_ENTITIES_IN_DATABASE,\n\t\tentities\n\t};\n}\n/**\n * Устанавливает значение поля в database\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\nexport function setInDatabaseByPath(data, path) {\n\treturn {\n\t\ttype: SET_IN_DATABASE_BY_PATH,\n\t\tdata, path\n\t};\n}\n\n/**\n * Добавляет (deepMerge) значение поля в database\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\nexport function appendInDatabaseByPath(data, path, options) {\n\tconsole.log(data);\n\treturn {\n\t\ttype: APPEND_IN_DATABASE_BY_PATH,\n\t\tdata, path, options\n\t};\n}\n\n/**\n * Добавляет значение поля в начало массива расположенного в database по пути path\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\nexport function prependInDatabaseByPath(data, path) {\n\treturn {\n\t\ttype: PREPEND_IN_DATABASE_BY_PATH,\n\t\tdata, path\n\t};\n}\nexport function removeInDatabaseByPath(key, path) {\n\treturn {\n\t\ttype: REMOVE_IN_DATABASE_BY_PATH,\n\t\tkey, path\n\t};\n}\nexport function makeIndexInDatabaseByPath(path, key) {\n\treturn {\n\t\ttype: MAKE_INDEX_IN_DATABASE_BY_PATH,\n\t\tpath,\n\t\tkey,\n\t};\n}\nexport function getUsers(pageNumber) {\n\tconst url = pageNumber ? `https://gorest.co.in/public-api/users?Page=${pageNumber}` : 'https://gorest.co.in/public-api/users';\n\tconst keys_path = `${USERS_KEY}`;\n\tconst keys_path_pages = `${COUNT_PAGES_KEY}.users`;\n\treturn (dispatch) => {\n\t\trequest(url)\n\t\t.then(d => {\n\t\t\tconst data = d.data;\n\t\t\tconst pages = d.meta.pagination;\n\t\t\tdispatch(setInDatabaseByPath(data, keys_path))\n\t\t\tdispatch(setInDatabaseByPath(pages, keys_path_pages))\n\t\t})\n\t}\n}\nexport function getPosts(id) {\n\tconst url = `https://gorest.co.in/public-api/users/${id}/posts`;\n\tconst keys_path = `${POSTS_KEY}`;\n\tconst keys_path_pages = `${COUNT_PAGES_KEY}.posts`;\n\treturn (dispatch) => {\n\t\trequest(url)\n\t\t.then(d => {\n\t\t\tconst data = d.data;\n\t\t\tconst pages = d.meta.pagination;\n\t\t\tdispatch(setInDatabaseByPath(data, keys_path))\n\t\t\tdispatch(setInDatabaseByPath(pages, keys_path_pages))\n\t\t})\n\t}\n}\nexport function getPost(id) {\n\tconst url = `https://gorest.co.in/public-api/users/${id}/posts`;\n\tconst keys_path = `${POST_KEY}`;\n\treturn (dispatch) => {\n\t\trequest(url)\n\t\t.then(d => {\n\t\t\tconst originalData = d.data;\n\t\t\tconst post = new schema.Entity(POST_KEY,  { post: [originalData[0].id]});\n\t\t\t\n\t\t\t// const article = new schema.Entity(POST_KEY, { [originalData[0].id]: post,});\nconst normalizedData = normalize(originalData, post);\nconsole.log(normalizedData.entities);\n// dispatch(mergeEntitiesInDB(normalizedData.entities));\n// let entity = new schema.Entity( POST_KEY );\n// console.log(entity);\n// const tt = { [ POST_KEY ]: new schema.Array( entity ) };\n// console.log(tt);\n\t\t\tconsole.log(post);\n\t\t\t// const post = data.filter(k => {if (k.id === id) return k});\n\t\t\tconsole.log(post);\n\t\t\tdispatch(setInDatabaseByPath(originalData, keys_path))\n\t\t})\n\t}\n}\nexport function getComments(id) {\n\tconst url = `https://gorest.co.in/public-api/posts/${id}/comments`;\n\tconst keys_path = `${COMMENTS_KEY}`;\n\treturn (dispatch) => {\n\t\trequest(url)\n\t\t.then(d => {\n\t\t\tconst data = d.data;\n\t\t\tdispatch(setInDatabaseByPath(data, keys_path))\n\t\t})\n\t}\n}\n// export function addUsers() {\n// \tconst url = 'https://gorest.co.in/public-api/users';\n// \tfetch(url)\n//     .then(response => response.json())\n//     .then(json => json)\n// if (!d.error) {\n// \tdispatch(appendInDatabaseByPath(d, keys_path));\n// }\n// }\nexport const requestAction = ( key ) =>\n({\n    type: REQUEST_DATA,\n    key: key,\n});"]},"metadata":{},"sourceType":"module"}