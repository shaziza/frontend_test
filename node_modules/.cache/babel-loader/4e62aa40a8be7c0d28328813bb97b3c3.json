{"ast":null,"code":"import { ADD_NOTIFICATION, REMOVE_NOTIFICATION, SET_NOTIFICATIONS, SET_ALL_NOTIFICATIONS, MARK_MESSAGES_AS_SEEN } from '../actions/actionsTypes';\nimport { MESSAGE_IS_READ_KEY } from '../actions/keys';\nimport { assignToPathFromObjectToValue } from '../helpers';\nexport const notifTypes = {\n  private_message: 'messages',\n  private_message_from_mentor: 'messages',\n  message_is_read: 'skip',\n  friend_request: ['bell', 'friend_requests']\n};\nconst initState = {\n  messages: [],\n  bell: [],\n  friend_requests: [],\n  unread: {},\n  counters: {},\n  [MESSAGE_IS_READ_KEY]: {}\n};\n/**\n *\n * @param  {Object} state \t\tstate состоит из каналов (channels)\n * @param  {Object} messages \tассоциативный массив, в котором каждому userID соответствует список сообщений\n * @param  {Object} bets               [description]\n * @param  {[type]} action             [description]\n * @return {[type]}                    [description]\n */\n\nconst notificationsReducer = (state = initState, action) => {\n  let new_state = Object.assign({}, state);\n  let messages = [...new_state.messages];\n  let notif, type;\n\n  switch (action.type) {\n    case SET_ALL_NOTIFICATIONS:\n      notif = divideNotifications(action.data);\n\n      if (action.reset) {\n        new_state.bell = notif.bell;\n        new_state.friend_requests = notif.friend_requests;\n      } else {\n        new_state.bell = [...new_state.bell, ...notif.bell];\n        new_state.friend_requests = [...new_state.friend_requests, ...notif.friend_requests];\n      }\n\n      return new_state;\n\n    case SET_NOTIFICATIONS:\n      if (action.path) {\n        new_state[action.path] = action.list;\n      } else {\n        new_state.unread = divideNotifications(action.list);\n        new_state.counters.im = new_state.unread.messages;\n      }\n\n      return new_state;\n\n    case MARK_MESSAGES_AS_SEEN:\n      return assignToPathFromObjectToValue(new_state, `${MESSAGE_IS_READ_KEY}.${action.reciever_type}.${action.reciever_id}.${action.opponent_id}`, action.timestamp);\n\n    case ADD_NOTIFICATION:\n      type = notifTypes[action.notif_type] ? notifTypes[action.notif_type] : 'bell';\n      if (type === 'skip') return new_state;\n\n      if (Array.isArray(type)) {\n        type.forEach(t => new_state[t] = [action.data, ...new_state[t]]);\n      } else {\n        new_state[type] = [action.data, ...new_state[type]];\n      }\n\n      return new_state;\n    // case SET_UNREAD_DIALOGS:\n    // \treturn state;\n\n    case REMOVE_NOTIFICATION:\n      if (Array.isArray(action.id)) {\n        action.id.map(id => messages.splice(id, 1));\n      } else {\n        messages.splice(action.id, 1);\n      }\n\n      return { ...new_state,\n        messages\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const divideNotifications = list => {\n  let state = JSON.parse(JSON.stringify(initState));\n\n  for (let key in list) {\n    let type = notifTypes[list[key].type] ? notifTypes[list[key].type] : 'bell';\n\n    if (Array.isArray(type)) {\n      type.forEach(t => state[t].push(Object.assign({}, list[key])));\n    } else {\n      type !== 'skip' && state[type].push(Object.assign({}, list[key]));\n    }\n  }\n\n  return state;\n};\nexport default notificationsReducer;","map":{"version":3,"sources":["/home/aziza/reactapp/src/reducers/notifications.js"],"names":["ADD_NOTIFICATION","REMOVE_NOTIFICATION","SET_NOTIFICATIONS","SET_ALL_NOTIFICATIONS","MARK_MESSAGES_AS_SEEN","MESSAGE_IS_READ_KEY","assignToPathFromObjectToValue","notifTypes","private_message","private_message_from_mentor","message_is_read","friend_request","initState","messages","bell","friend_requests","unread","counters","notificationsReducer","state","action","new_state","Object","assign","notif","type","divideNotifications","data","reset","path","list","im","reciever_type","reciever_id","opponent_id","timestamp","notif_type","Array","isArray","forEach","t","id","map","splice","JSON","parse","stringify","key","push"],"mappings":"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","sourcesContent":["import {\n\tADD_NOTIFICATION,\n\tREMOVE_NOTIFICATION,\n\tSET_NOTIFICATIONS,\n\tSET_ALL_NOTIFICATIONS,\n\tMARK_MESSAGES_AS_SEEN\n} from '../actions/actionsTypes'\nimport {MESSAGE_IS_READ_KEY} from '../actions/keys'\nimport {assignToPathFromObjectToValue} from '../helpers'\n\nexport const notifTypes = {\n\tprivate_message: 'messages',\n\tprivate_message_from_mentor: 'messages',\n\tmessage_is_read: 'skip',\n\tfriend_request: ['bell', 'friend_requests']\n}\nconst initState = {\n\tmessages: [],\n\tbell: [],\n\tfriend_requests: [],\n\tunread: {},\n\tcounters: {},\n\t[MESSAGE_IS_READ_KEY]: {}\n}\n/**\n *\n * @param  {Object} state \t\tstate состоит из каналов (channels)\n * @param  {Object} messages \tассоциативный массив, в котором каждому userID соответствует список сообщений\n * @param  {Object} bets               [description]\n * @param  {[type]} action             [description]\n * @return {[type]}                    [description]\n */\nconst notificationsReducer = (state = initState, action) => {\n\tlet new_state = Object.assign({}, state);\n\tlet messages = [...new_state.messages];\n\tlet notif, type;\n\tswitch (action.type) {\n\t\tcase SET_ALL_NOTIFICATIONS:\n\t\t\tnotif = divideNotifications(action.data);\n\t\t\tif (action.reset) {\n\t\t\t\tnew_state.bell = notif.bell;\n\t\t\t\tnew_state.friend_requests = notif.friend_requests;\n\t\t\t} else {\n\t\t\t\tnew_state.bell = [...new_state.bell, ...notif.bell];\n\t\t\t\tnew_state.friend_requests = [...new_state.friend_requests, ...notif.friend_requests];\n\t\t\t}\n\t\t\treturn new_state;\n\t\tcase SET_NOTIFICATIONS:\n\t\t\tif (action.path) {\n\t\t\t\tnew_state[action.path] = action.list\n\t\t\t} else {\n\t\t\t\tnew_state.unread = divideNotifications(action.list);\n\t\t\t\tnew_state.counters.im = new_state.unread.messages;\n\t\t\t}\n\t\t\treturn new_state;\n\t\tcase MARK_MESSAGES_AS_SEEN:\n\t\t\treturn assignToPathFromObjectToValue(new_state,\n\t\t\t\t`${MESSAGE_IS_READ_KEY}.${action.reciever_type}.${action.reciever_id}.${action.opponent_id}`,\n\t\t\t\taction.timestamp\n\t\t\t)\n\t\tcase ADD_NOTIFICATION:\n\t\t\ttype = notifTypes[action.notif_type] ? notifTypes[action.notif_type] : 'bell';\n\t\t\tif (type === 'skip') return new_state;\n\t\t\tif (Array.isArray(type)) {\n\t\t\t\ttype.forEach(t => new_state[t] = [action.data, ...new_state[t]])\n\t\t\t} else {\n\t\t\t\tnew_state[type] = [action.data, ...new_state[type]];\n\t\t\t}\n\t\t\treturn new_state;\n\t\t// case SET_UNREAD_DIALOGS:\n\t\t// \treturn state;\n\t\tcase REMOVE_NOTIFICATION:\n\t\t\tif (Array.isArray(action.id)) {\n\t\t\t\taction.id.map(id => messages.splice(id, 1));\n\t\t\t} else {\n\t\t\t\tmessages.splice(action.id, 1);\n\t\t\t}\n\t\t\treturn {...new_state, messages};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport const divideNotifications = (list) => {\n\tlet state = JSON.parse(JSON.stringify(initState));\n\tfor (let key in list) {\n\t\tlet type = notifTypes[list[key].type] ? notifTypes[list[key].type] : 'bell';\n\t\tif (Array.isArray(type)) {\n\t\t\ttype.forEach(\n\t\t\t\tt => state[t].push(Object.assign({}, list[key]))\n\t\t\t);\n\t\t} else {\n\t\t\ttype !== 'skip' && state[type].push(Object.assign({}, list[key]))\n\t\t}\n\t}\n\treturn state;\n}\n\nexport default notificationsReducer;\n"]},"metadata":{},"sourceType":"module"}