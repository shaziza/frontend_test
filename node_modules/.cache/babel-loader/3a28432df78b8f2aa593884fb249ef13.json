{"ast":null,"code":"import { ADD_TO_DATABASE, UPDATE_LIST_IN_DATABASE, PREPAND_LIST_TO_DATABASE, MERGE_ENTITIES_IN_DATABASE, SET_IN_DATABASE_BY_PATH, APPEND_IN_DATABASE_BY_PATH, PREPEND_IN_DATABASE_BY_PATH, REMOVE_IN_DATABASE_BY_PATH, MAKE_INDEX_IN_DATABASE_BY_PATH, REQUEST_DATA } from './actionsTypes';\nimport { USERS_KEY, META_KEY // KEYS_LIST_KEY\n} from './keys';\nimport { request } from \"./request\";\n/***DATABASE***/\n\nexport const setFieldInDatabase = (entity, field, data) => {\n  return {\n    type: ADD_TO_DATABASE,\n    entity,\n    field,\n    data\n  };\n};\nexport const appendToListInDatabase = (entity, field, data) => {\n  return {\n    type: UPDATE_LIST_IN_DATABASE,\n    entity,\n    field,\n    data\n  };\n};\nexport const prependToListInDatabase = (entity, field, data) => {\n  return {\n    type: PREPAND_LIST_TO_DATABASE,\n    entity,\n    field,\n    data\n  };\n};\nexport function mergeEntitiesInDB(entities) {\n  return {\n    type: MERGE_ENTITIES_IN_DATABASE,\n    entities\n  };\n}\n/**\n * Устанавливает значение поля в database\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\n\nexport function setInDatabaseByPath(data, path) {\n  return {\n    type: SET_IN_DATABASE_BY_PATH,\n    data,\n    path\n  };\n}\n/**\n * Добавляет (deepMerge) значение поля в database\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\n\nexport function appendInDatabaseByPath(data, path, options) {\n  console.log(data);\n  return {\n    type: APPEND_IN_DATABASE_BY_PATH,\n    data,\n    path,\n    options\n  };\n}\n/**\n * Добавляет значение поля в начало массива расположенного в database по пути path\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\n\nexport function prependInDatabaseByPath(data, path) {\n  return {\n    type: PREPEND_IN_DATABASE_BY_PATH,\n    data,\n    path\n  };\n}\nexport function removeInDatabaseByPath(key, path) {\n  return {\n    type: REMOVE_IN_DATABASE_BY_PATH,\n    key,\n    path\n  };\n}\nexport function makeIndexInDatabaseByPath(path, key) {\n  return {\n    type: MAKE_INDEX_IN_DATABASE_BY_PATH,\n    path,\n    key\n  };\n}\nexport function addUsers(pageNumber) {\n  console.log(pageNumber);\n  const url = 'https://gorest.co.in/public-api/users';\n  const keys_path = `${USERS_KEY}`;\n  const keys_path_meta = `${META_KEY}`; // return (dispatch) => {\n  // \tif (pageNumber) params.pageNumber;\n  // \tconst body = JSON.stringify(params);\n  // \tfetch(url, {body: body})\n  // \t.then(response => response.json())\n  // \t.then(json => {\n  // \t\tconst data = json.data;\n  // \t\tconst meta = json.meta;\n  // \t\tdispatch(setInDatabaseByPath(data, keys_path))\n  // \t\tdispatch(setInDatabaseByPath(meta, keys_path_meta))\n  // \t})\n  // }\n\n  return dispatch => request(url, 'GET', {\n    pageNumber\n  }).then(json => {\n    const data = json.data;\n    const meta = json.meta;\n    dispatch(setInDatabaseByPath(data, keys_path));\n    dispatch(setInDatabaseByPath(meta, keys_path_meta));\n  });\n} // export function addUsers() {\n// \tconst url = 'https://gorest.co.in/public-api/users';\n// \tfetch(url)\n//     .then(response => response.json())\n//     .then(json => json)\n// if (!d.error) {\n// \tdispatch(appendInDatabaseByPath(d, keys_path));\n// }\n// }\n\nexport const requestAction = key => ({\n  type: REQUEST_DATA,\n  key: key\n});","map":{"version":3,"sources":["/home/aziza/reactapp/src/actions/actions.js"],"names":["ADD_TO_DATABASE","UPDATE_LIST_IN_DATABASE","PREPAND_LIST_TO_DATABASE","MERGE_ENTITIES_IN_DATABASE","SET_IN_DATABASE_BY_PATH","APPEND_IN_DATABASE_BY_PATH","PREPEND_IN_DATABASE_BY_PATH","REMOVE_IN_DATABASE_BY_PATH","MAKE_INDEX_IN_DATABASE_BY_PATH","REQUEST_DATA","USERS_KEY","META_KEY","request","setFieldInDatabase","entity","field","data","type","appendToListInDatabase","prependToListInDatabase","mergeEntitiesInDB","entities","setInDatabaseByPath","path","appendInDatabaseByPath","options","console","log","prependInDatabaseByPath","removeInDatabaseByPath","key","makeIndexInDatabaseByPath","addUsers","pageNumber","url","keys_path","keys_path_meta","dispatch","then","json","meta","requestAction"],"mappings":"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","sourcesContent":["import {\n    ADD_TO_DATABASE,\n    UPDATE_LIST_IN_DATABASE,\n    PREPAND_LIST_TO_DATABASE,\n    MERGE_ENTITIES_IN_DATABASE,\n    SET_IN_DATABASE_BY_PATH,\n    APPEND_IN_DATABASE_BY_PATH,\n    PREPEND_IN_DATABASE_BY_PATH,\n    REMOVE_IN_DATABASE_BY_PATH,\n    MAKE_INDEX_IN_DATABASE_BY_PATH,\n    REQUEST_DATA\n} from './actionsTypes';\nimport {\n\tUSERS_KEY,\n\tMETA_KEY\n\t// KEYS_LIST_KEY\n} from './keys';\nimport { request } from \"./request\";\n/***DATABASE***/\nexport const setFieldInDatabase = (entity, field, data) => {\n\treturn {\n\t\ttype: ADD_TO_DATABASE,\n\t\tentity,\n\t\tfield,\n\t\tdata,\n\t};\n}\nexport const appendToListInDatabase = (entity, field, data) => {\n\treturn {\n\t\ttype: UPDATE_LIST_IN_DATABASE,\n\t\tentity,\n\t\tfield,\n\t\tdata\n\t};\n}\nexport const prependToListInDatabase = (entity, field, data) => {\n\treturn {\n\t\ttype: PREPAND_LIST_TO_DATABASE,\n\t\tentity,\n\t\tfield,\n\t\tdata\n\t};\n}\n\nexport function mergeEntitiesInDB(entities) {\n\treturn {\n\t\ttype: MERGE_ENTITIES_IN_DATABASE,\n\t\tentities\n\t};\n}\n/**\n * Устанавливает значение поля в database\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\nexport function setInDatabaseByPath(data, path) {\n\treturn {\n\t\ttype: SET_IN_DATABASE_BY_PATH,\n\t\tdata, path\n\t};\n}\n\n/**\n * Добавляет (deepMerge) значение поля в database\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\nexport function appendInDatabaseByPath(data, path, options) {\n\tconsole.log(data);\n\treturn {\n\t\ttype: APPEND_IN_DATABASE_BY_PATH,\n\t\tdata, path, options\n\t};\n}\n\n/**\n * Добавляет значение поля в начало массива расположенного в database по пути path\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\nexport function prependInDatabaseByPath(data, path) {\n\treturn {\n\t\ttype: PREPEND_IN_DATABASE_BY_PATH,\n\t\tdata, path\n\t};\n}\nexport function removeInDatabaseByPath(key, path) {\n\treturn {\n\t\ttype: REMOVE_IN_DATABASE_BY_PATH,\n\t\tkey, path\n\t};\n}\nexport function makeIndexInDatabaseByPath(path, key) {\n\treturn {\n\t\ttype: MAKE_INDEX_IN_DATABASE_BY_PATH,\n\t\tpath,\n\t\tkey,\n\t};\n}\nexport function addUsers(pageNumber) {\n\tconsole.log(pageNumber);\n\tconst url = 'https://gorest.co.in/public-api/users';\n\tconst keys_path = `${USERS_KEY}`;\n\tconst keys_path_meta = `${META_KEY}`;\n\t// return (dispatch) => {\n\t// \tif (pageNumber) params.pageNumber;\n\t// \tconst body = JSON.stringify(params);\n\t// \tfetch(url, {body: body})\n\t// \t.then(response => response.json())\n\t// \t.then(json => {\n\t// \t\tconst data = json.data;\n\t// \t\tconst meta = json.meta;\n\t// \t\tdispatch(setInDatabaseByPath(data, keys_path))\n\t// \t\tdispatch(setInDatabaseByPath(meta, keys_path_meta))\n\t// \t})\n\t// }\n\treturn (dispatch) => request(url, 'GET', {pageNumber})\n\t.then(json => {\n\t\tconst data = json.data;\n\t\tconst meta = json.meta;\n\t\tdispatch(setInDatabaseByPath(data, keys_path))\n\t\tdispatch(setInDatabaseByPath(meta, keys_path_meta))\n\t})\n}\n\n// export function addUsers() {\n// \tconst url = 'https://gorest.co.in/public-api/users';\n// \tfetch(url)\n//     .then(response => response.json())\n//     .then(json => json)\n// if (!d.error) {\n// \tdispatch(appendInDatabaseByPath(d, keys_path));\n// }\n// }\nexport const requestAction = ( key ) =>\n({\n    type: REQUEST_DATA,\n    key: key,\n});"]},"metadata":{},"sourceType":"module"}