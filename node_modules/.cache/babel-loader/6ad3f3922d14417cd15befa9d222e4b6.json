{"ast":null,"code":"import { UPDATE_IN_FILELOADER, ADD_TO_DATABASE, RESPONSE_AUTH_USER, REMOVE_FROM_DATABASE, APPEND_LIST_TO_DATABASE, PREPAND_LIST_TO_DATABASE, UPDATE_IN_DATABASE_BY_ID, MERGE_ENTITIES_IN_DATABASE, SET_IN_DATABASE_BY_PATH, APPEND_IN_DATABASE_BY_PATH, PREPEND_IN_DATABASE_BY_PATH, REMOVE_IN_DATABASE_BY_PATH, MAKE_INDEX_IN_DATABASE_BY_PATH } from '../actions/actionsTypes';\nimport { STEAM_ITEMS_KEY, COMMENTS_KEY, LIVE_KEY // ADMIN_PANEL_KEY,\n// ADMIN_BUH_WALLET,\n, PRODUCTS_FINISHED_KEY, CART_KEY, ORDERS_KEY, SHOPS_KEY, SEARCH_KEY, WALL_KEY, IMAGES_KEY, LAST_IDS_KEY, ALBUMS_USER_KEY, ALBUMS_SHOP_KEY, PHOTOS_USER_KEY, PHOTOS_SHOP_KEY, DELETED_IMAGES_KEY, CURRENT_ALBUM_PHOTOS_KEY, CATEGORIES_KEY, GLOBAL_SEARCH_KEY, BID_INFO_KEY, WEBSOCKET_KEY, NOTIFICATIONS_KEY, BLOG_KEY, BLOGER_KEY, BLOG_INFO_KEY, BLOG_POST_KEY, BRANDS_KEY, BRAND_CATALOGS_KEY, PAYMENTS_KEY, UNREAD_DIALOGS_KEY, COUNTS_KEY, DELIVERIES_KEY, USERS_KEY, ALBUMS_IDS_KEY, REFERAL_KEY, PARTNER_KEY, SOCIAL_BUTTON_KEY, USER_HELPERS_DATA_KEY, PRODUCTS_KEY, GAMES_KEY, FAVORITES_KEY, RADIOSTATION_KEY, AUTHOR_KEY, TRACK_KEY, HASH_TAGS_KEY } from '../actions/keys';\nimport { prependToPathFromObjectToValue, appendToPathFromObjectToValue, assignToPathFromObjectToValue, removeKeyFromPathInObject, getPathFromObject, appendInObject, buildIndexOfKeys } from \"../helpers\";\n/**\n * Массив для построения списка соответсвий между id и номерами в массиве\n * Структура:\n * {name}: {fields}\n * name - имя сущности\n * fields - массив полей по которым строится индекс внутри основного поля, если 1, то строить по всем полям\n * @type {Object}\n */\n\nexport const withKeys = {\n  messages: ['messages'],\n  [ALBUMS_USER_KEY]: 1,\n  [ALBUMS_SHOP_KEY]: 1\n};\n\nconst databaseReducer = (state = {\n  im: {},\n  attachments: [],\n  constants: {},\n  counters: {},\n  dialogs: {},\n  messages: {},\n  reviews: {},\n  [AUTHOR_KEY]: {},\n  [ALBUMS_IDS_KEY]: {},\n  [ALBUMS_USER_KEY]: {},\n  [ALBUMS_SHOP_KEY]: {},\n  [BLOG_KEY]: {},\n  [BLOGER_KEY]: {},\n  [BLOG_INFO_KEY]: {},\n  [BLOG_POST_KEY]: {},\n  [BID_INFO_KEY]: {},\n  [DELIVERIES_KEY]: {},\n  [DELETED_IMAGES_KEY]: [],\n  [CART_KEY]: [],\n  [CATEGORIES_KEY]: {},\n  [COUNTS_KEY]: {},\n  [CURRENT_ALBUM_PHOTOS_KEY]: {},\n  [FAVORITES_KEY]: {},\n  [GLOBAL_SEARCH_KEY]: undefined,\n  [HASH_TAGS_KEY]: {},\n  [USER_HELPERS_DATA_KEY]: {},\n  [IMAGES_KEY]: {},\n  [LIVE_KEY]: [],\n  // [ADMIN_PANEL_KEY]: {},\n  // [ADMIN_BUH_WALLET]: {},\n  [PRODUCTS_FINISHED_KEY]: [],\n  [NOTIFICATIONS_KEY]: [],\n  [ORDERS_KEY]: {},\n  [PARTNER_KEY]: {},\n  [PAYMENTS_KEY]: [],\n  [PHOTOS_USER_KEY]: {},\n  [PHOTOS_SHOP_KEY]: {},\n  [PRODUCTS_KEY]: {},\n  [GAMES_KEY]: {},\n  [RADIOSTATION_KEY]: {},\n  [REFERAL_KEY]: {},\n  [SHOPS_KEY]: {},\n  [STEAM_ITEMS_KEY]: {},\n  [SOCIAL_BUTTON_KEY]: [],\n  [TRACK_KEY]: {},\n  [WALL_KEY]: {},\n  [WEBSOCKET_KEY]: {},\n  [LAST_IDS_KEY]: {},\n  [UNREAD_DIALOGS_KEY]: {},\n  [USERS_KEY]: {\n    search: [],\n    all: {}\n  },\n  keys_list: {\n    messages: {},\n    [ALBUMS_USER_KEY]: {},\n    [BLOG_KEY]: {},\n    [BLOGER_KEY]: {},\n    [ALBUMS_SHOP_KEY]: {}\n  }\n}, action) => {\n  let new_state = { ...state\n  };\n  let key, id, userID, user, index;\n\n  switch (action.type) {\n    case MERGE_ENTITIES_IN_DATABASE:\n      [SEARCH_KEY, BLOG_INFO_KEY, BLOG_KEY, BLOGER_KEY, WALL_KEY, ORDERS_KEY, USERS_KEY, AUTHOR_KEY, PRODUCTS_KEY, GAMES_KEY, COMMENTS_KEY, CATEGORIES_KEY, FAVORITES_KEY, SHOPS_KEY, BRANDS_KEY, BRAND_CATALOGS_KEY, RADIOSTATION_KEY, TRACK_KEY, STEAM_ITEMS_KEY, HASH_TAGS_KEY].forEach(key => {\n        if (action.entities[key]) {\n          new_state[key] = appendInObject(new_state[key], action.entities[key], {\n            deep_level: 1\n          });\n        }\n      });\n      return new_state;\n\n    case SET_IN_DATABASE_BY_PATH:\n      return Object.assign({}, state, assignToPathFromObjectToValue(new_state, action.path, action.data));\n\n    case APPEND_IN_DATABASE_BY_PATH:\n      return Object.assign({}, state, appendToPathFromObjectToValue(new_state, action.path, action.data, action.options));\n\n    case PREPEND_IN_DATABASE_BY_PATH:\n      return Object.assign({}, state, prependToPathFromObjectToValue(new_state, action.path, action.data));\n\n    case REMOVE_IN_DATABASE_BY_PATH:\n      return Object.assign({}, state, removeKeyFromPathInObject(new_state, action.path, action.key));\n\n    case MAKE_INDEX_IN_DATABASE_BY_PATH:\n      index = buildIndexOfKeys(getPathFromObject(state, action.path, []), action.key);\n      return Object.assign({}, state, assignToPathFromObjectToValue(new_state, `keys_list.${action.path}`, index));\n\n    case ADD_TO_DATABASE:\n      new_state[action.entity][action.field] = action.data;\n\n      if (withKeys[action.entity]) {\n        new_state.keys_list[action.entity][action.field] = {};\n\n        if (withKeys[action.entity] === 1) {\n          new_state.keys_list[action.entity][action.field] = makeListOfKeys(action.data);\n        } else {\n          for (key of withKeys[action.entity]) {\n            new_state.keys_list[action.entity][action.field][key] = makeListOfKeys(action.data[key]);\n          }\n        }\n      }\n\n      return new_state;\n\n    case APPEND_LIST_TO_DATABASE:\n      if (withKeys[action.entity]) {\n        if (withKeys[action.entity] === 1) {\n          console.info(APPEND_LIST_TO_DATABASE, 'NOT IMPLEMENTED for this entity');\n        } else {\n          for (key of withKeys[action.entity]) {\n            new_state[action.entity][action.field][key] = [...state[action.entity][action.field][key], ...action.data[key]];\n            new_state.keys_list[action.entity][action.field][key] = makeListOfKeys(new_state[action.entity][action.field][key]);\n          }\n        }\n      } else {\n        console.info(APPEND_LIST_TO_DATABASE, 'NEED FIXES');\n        new_state[action.entity][action.field] = Array.isArray(action.data) ? [...new_state[action.entity][action.field], ...action.data] : Object.assign(new_state[action.entity][action.field], action.data);\n      }\n\n      return new_state;\n\n    case PREPAND_LIST_TO_DATABASE:\n      if (withKeys[action.entity]) {\n        for (key of withKeys[action.entity]) {\n          new_state[action.entity][action.field][key] = [...action.data[key], ...state[action.entity][action.field][key]];\n          new_state.keys_list[action.entity][action.field][key] = makeListOfKeys(new_state[action.entity][action.field][key]);\n        }\n      } else {\n        console.info(PREPAND_LIST_TO_DATABASE, 'NEED FIXES');\n        new_state[action.entity][action.field] = Object.assign({}, new_state[action.entity][action.field], action.data);\n      }\n\n      return new_state;\n\n    case REMOVE_FROM_DATABASE:\n      delete new_state[action.entity][action.field];\n      return new_state;\n\n    case UPDATE_IN_DATABASE_BY_ID:\n      id = new_state.keys_list[action.entity][action.field][action.key][action.id];\n      new_state[action.entity][action.field][action.key][id] = action.data;\n      new_state.keys_list[action.entity][action.field][action.key][action.data.id] = id;\n      delete new_state.keys_list[action.entity][action.field][action.key][action.id];\n      return new_state;\n\n    case UPDATE_IN_FILELOADER:\n      if (action.state === 'error') {\n        return state;\n      } else if (action.state === 'loaded') {\n        return state;\n      } else if (action.state === 'ready') {\n        // eslint-disable-next-line\n        let i = 0; // eslint-disable-next-line\n\n        const files = getPathFromObject(new_state, action.destination);\n\n        if (files) {\n          for (i = 0; i < files.length; i++) {\n            if (files[i].id === action.id) {\n              files[i] = action.file;\n              break;\n            }\n          }\n\n          if (i === files.length) {\n            files.push(action.file);\n          }\n\n          return Object.assign({}, new_state, assignToPathFromObjectToValue(new_state, action.destination, files));\n        } else {\n          return Object.assign({}, new_state, prependToPathFromObjectToValue(new_state, action.destination, [action.file]));\n        }\n      } else {\n        return Object.assign({}, new_state, prependToPathFromObjectToValue(new_state, action.destination, [action.file]));\n      }\n\n    case RESPONSE_AUTH_USER:\n      userID = action.response.data.result.users[0];\n      user = action.response.data.entities.users[userID];\n      new_state.im = user;\n      return new_state;\n\n    default:\n      return state;\n  }\n};\n\nconst makeListOfKeys = (list, key = 'id') => {\n  let ids = {};\n\n  for (let i = 0; i < list.length; i++) {\n    ids[list[i][key]] = i;\n  }\n\n  return ids;\n};\n\nexport default databaseReducer;","map":{"version":3,"sources":["/home/aziza/reactapp/src/reducers/database.js"],"names":["UPDATE_IN_FILELOADER","ADD_TO_DATABASE","RESPONSE_AUTH_USER","REMOVE_FROM_DATABASE","APPEND_LIST_TO_DATABASE","PREPAND_LIST_TO_DATABASE","UPDATE_IN_DATABASE_BY_ID","MERGE_ENTITIES_IN_DATABASE","SET_IN_DATABASE_BY_PATH","APPEND_IN_DATABASE_BY_PATH","PREPEND_IN_DATABASE_BY_PATH","REMOVE_IN_DATABASE_BY_PATH","MAKE_INDEX_IN_DATABASE_BY_PATH","STEAM_ITEMS_KEY","COMMENTS_KEY","LIVE_KEY","PRODUCTS_FINISHED_KEY","CART_KEY","ORDERS_KEY","SHOPS_KEY","SEARCH_KEY","WALL_KEY","IMAGES_KEY","LAST_IDS_KEY","ALBUMS_USER_KEY","ALBUMS_SHOP_KEY","PHOTOS_USER_KEY","PHOTOS_SHOP_KEY","DELETED_IMAGES_KEY","CURRENT_ALBUM_PHOTOS_KEY","CATEGORIES_KEY","GLOBAL_SEARCH_KEY","BID_INFO_KEY","WEBSOCKET_KEY","NOTIFICATIONS_KEY","BLOG_KEY","BLOGER_KEY","BLOG_INFO_KEY","BLOG_POST_KEY","BRANDS_KEY","BRAND_CATALOGS_KEY","PAYMENTS_KEY","UNREAD_DIALOGS_KEY","COUNTS_KEY","DELIVERIES_KEY","USERS_KEY","ALBUMS_IDS_KEY","REFERAL_KEY","PARTNER_KEY","SOCIAL_BUTTON_KEY","USER_HELPERS_DATA_KEY","PRODUCTS_KEY","GAMES_KEY","FAVORITES_KEY","RADIOSTATION_KEY","AUTHOR_KEY","TRACK_KEY","HASH_TAGS_KEY","prependToPathFromObjectToValue","appendToPathFromObjectToValue","assignToPathFromObjectToValue","removeKeyFromPathInObject","getPathFromObject","appendInObject","buildIndexOfKeys","withKeys","messages","databaseReducer","state","im","attachments","constants","counters","dialogs","reviews","undefined","search","all","keys_list","action","new_state","key","id","userID","user","index","type","forEach","entities","deep_level","Object","assign","path","data","options","entity","field","makeListOfKeys","console","info","Array","isArray","i","files","destination","length","file","push","response","result","users","list","ids"],"mappings":"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","sourcesContent":["import {\n\tUPDATE_IN_FILELOADER,\n\tADD_TO_DATABASE,\n\tRESPONSE_AUTH_USER,\n\tREMOVE_FROM_DATABASE,\n\tAPPEND_LIST_TO_DATABASE,\n\tPREPAND_LIST_TO_DATABASE,\n\tUPDATE_IN_DATABASE_BY_ID,\n\tMERGE_ENTITIES_IN_DATABASE,\n\tSET_IN_DATABASE_BY_PATH,\n\tAPPEND_IN_DATABASE_BY_PATH,\n\tPREPEND_IN_DATABASE_BY_PATH,\n\tREMOVE_IN_DATABASE_BY_PATH,\n\tMAKE_INDEX_IN_DATABASE_BY_PATH,\n} from '../actions/actionsTypes';\nimport {\n\tSTEAM_ITEMS_KEY,\n\tCOMMENTS_KEY,\n\tLIVE_KEY,\n\t// ADMIN_PANEL_KEY,\n\t// ADMIN_BUH_WALLET,\n\tPRODUCTS_FINISHED_KEY,\n\tCART_KEY,\n\tORDERS_KEY,\n\tSHOPS_KEY,\n\tSEARCH_KEY,\n\tWALL_KEY,\n\tIMAGES_KEY,\n\tLAST_IDS_KEY,\n\tALBUMS_USER_KEY,\n\tALBUMS_SHOP_KEY,\n\tPHOTOS_USER_KEY,\n\tPHOTOS_SHOP_KEY,\n\tDELETED_IMAGES_KEY,\n\tCURRENT_ALBUM_PHOTOS_KEY,\n\tCATEGORIES_KEY,\n\tGLOBAL_SEARCH_KEY,\n\tBID_INFO_KEY,\n\tWEBSOCKET_KEY,\n\tNOTIFICATIONS_KEY,\n\tBLOG_KEY,\n\tBLOGER_KEY,\n\tBLOG_INFO_KEY,\n\tBLOG_POST_KEY,\n\tBRANDS_KEY,\n\tBRAND_CATALOGS_KEY,\n\tPAYMENTS_KEY,\n\tUNREAD_DIALOGS_KEY,\n\tCOUNTS_KEY,\n\tDELIVERIES_KEY,\n\tUSERS_KEY,\n\tALBUMS_IDS_KEY,\n\tREFERAL_KEY,\n\tPARTNER_KEY,\n\tSOCIAL_BUTTON_KEY,\n\tUSER_HELPERS_DATA_KEY,\n\tPRODUCTS_KEY,\n\tGAMES_KEY,\n\tFAVORITES_KEY,\n\tRADIOSTATION_KEY,\n\tAUTHOR_KEY,\n\tTRACK_KEY,\n\tHASH_TAGS_KEY\n} from '../actions/keys';\nimport {\n\tprependToPathFromObjectToValue,\n\tappendToPathFromObjectToValue,\n\tassignToPathFromObjectToValue,\n\tremoveKeyFromPathInObject,\n\tgetPathFromObject,\n\tappendInObject,\n\tbuildIndexOfKeys\n} from \"../helpers\";\n\n/**\n * Массив для построения списка соответсвий между id и номерами в массиве\n * Структура:\n * {name}: {fields}\n * name - имя сущности\n * fields - массив полей по которым строится индекс внутри основного поля, если 1, то строить по всем полям\n * @type {Object}\n */\nexport const withKeys = {\n\tmessages: ['messages'],\n\t[ALBUMS_USER_KEY]: 1,\n\t[ALBUMS_SHOP_KEY]: 1,\n};\nconst databaseReducer = (state = {\n\tim: {},\n\tattachments: [],\n\tconstants: {},\n\tcounters: {},\n\tdialogs: {},\n\tmessages: {},\n\treviews: {},\n\t[AUTHOR_KEY]: {},\n\t[ALBUMS_IDS_KEY]: {},\n\t[ALBUMS_USER_KEY]: {},\n\t[ALBUMS_SHOP_KEY]: {},\n\t[BLOG_KEY]: {},\n\t[BLOGER_KEY]: {},\n\t[BLOG_INFO_KEY]: {},\n\t[BLOG_POST_KEY]: {},\n\t[BID_INFO_KEY]: {},\n\t[DELIVERIES_KEY]: {},\n\t[DELETED_IMAGES_KEY]: [],\n\t[CART_KEY]: [],\n\t[CATEGORIES_KEY]: {},\n\t[COUNTS_KEY]: {},\n\t[CURRENT_ALBUM_PHOTOS_KEY]: {},\n\t[FAVORITES_KEY]: {},\n\t[GLOBAL_SEARCH_KEY]: undefined,\n\t[HASH_TAGS_KEY]: {},\n\t[USER_HELPERS_DATA_KEY]: {},\n\t[IMAGES_KEY]: {},\n\t[LIVE_KEY]: [],\n\t// [ADMIN_PANEL_KEY]: {},\n\t// [ADMIN_BUH_WALLET]: {},\n\t[PRODUCTS_FINISHED_KEY]: [],\n\t[NOTIFICATIONS_KEY]: [],\n\t[ORDERS_KEY]: {},\n\t[PARTNER_KEY]: {},\n\t[PAYMENTS_KEY]: [],\n\t[PHOTOS_USER_KEY]: {},\n\t[PHOTOS_SHOP_KEY]: {},\n\t[PRODUCTS_KEY]: {},\n\t[GAMES_KEY]: {},\n\t[RADIOSTATION_KEY]: {},\n\t[REFERAL_KEY]: {},\n\t[SHOPS_KEY]: {},\n\t[STEAM_ITEMS_KEY]: {},\n\t[SOCIAL_BUTTON_KEY]: [],\n\t[TRACK_KEY]: {},\n\t[WALL_KEY]: {},\n\t[WEBSOCKET_KEY]: {},\n\t[LAST_IDS_KEY]: {},\n\t[UNREAD_DIALOGS_KEY]: {},\n\t[USERS_KEY]: {\n\t\tsearch: [],\n\t\tall: {}\n\t},\n\tkeys_list: {\n\t\tmessages: {},\n\t\t[ALBUMS_USER_KEY]: {},\n\t\t[BLOG_KEY]: {},\n\t\t[BLOGER_KEY]: {},\n\t\t[ALBUMS_SHOP_KEY]: {},\n\t}\n}, action) => {\n\tlet new_state = {...state};\n\tlet key, id, userID, user, index;\n\tswitch (action.type) {\n\t\tcase MERGE_ENTITIES_IN_DATABASE:\n\t\t\t[\n\t\t\t\tSEARCH_KEY,\n\t\t\t\tBLOG_INFO_KEY,\n\t\t\t\tBLOG_KEY,\n\t\t\t\tBLOGER_KEY,\n\t\t\t\tWALL_KEY,\n\t\t\t\tORDERS_KEY,\n\t\t\t\tUSERS_KEY,\n\t\t\t\tAUTHOR_KEY,\n\t\t\t\tPRODUCTS_KEY,\n\t\t\t\tGAMES_KEY,\n\t\t\t\tCOMMENTS_KEY,\n\t\t\t\tCATEGORIES_KEY,\n\t\t\t\tFAVORITES_KEY,\n\t\t\t\tSHOPS_KEY,\n\t\t\t\tBRANDS_KEY,\n\t\t\t\tBRAND_CATALOGS_KEY,\n\t\t\t\tRADIOSTATION_KEY,\n\t\t\t\tTRACK_KEY,\n\t\t\t\tSTEAM_ITEMS_KEY,\n\t\t\t\tHASH_TAGS_KEY\n\t\t\t].forEach(key => {\n\t\t\t\tif (action.entities[key]) {\n\t\t\t\t\tnew_state[key] = appendInObject(new_state[key], action.entities[key], {deep_level: 1});\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn new_state;\n\t\tcase SET_IN_DATABASE_BY_PATH:\n\t\t\treturn Object.assign({}, state, assignToPathFromObjectToValue(new_state, action.path, action.data));\n\t\tcase APPEND_IN_DATABASE_BY_PATH:\n\t\t\treturn Object.assign({}, state, appendToPathFromObjectToValue(new_state, action.path, action.data, action.options));\n\t\tcase PREPEND_IN_DATABASE_BY_PATH:\n\t\t\treturn Object.assign({}, state, prependToPathFromObjectToValue(new_state, action.path, action.data));\n\t\tcase REMOVE_IN_DATABASE_BY_PATH:\n\t\t\treturn Object.assign({}, state, removeKeyFromPathInObject(new_state, action.path, action.key));\n\t\tcase MAKE_INDEX_IN_DATABASE_BY_PATH:\n\t\t\tindex = buildIndexOfKeys(getPathFromObject(state, action.path, []), action.key);\n\t\t\treturn Object.assign({}, state, assignToPathFromObjectToValue(new_state, `keys_list.${action.path}`, index));\n\t\tcase ADD_TO_DATABASE:\n\t\t\tnew_state[action.entity][action.field] = action.data;\n\t\t\tif (withKeys[action.entity]) {\n\t\t\t\tnew_state.keys_list[action.entity][action.field] = {};\n\t\t\t\tif (withKeys[action.entity] === 1) {\n\t\t\t\t\tnew_state.keys_list[action.entity][action.field] = makeListOfKeys(action.data);\n\t\t\t\t} else {\n\t\t\t\t\tfor (key of withKeys[action.entity]) {\n\t\t\t\t\t\tnew_state.keys_list[action.entity][action.field][key] = makeListOfKeys(action.data[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new_state;\n\t\tcase APPEND_LIST_TO_DATABASE:\n\t\t\tif (withKeys[action.entity]) {\n\t\t\t\tif (withKeys[action.entity] === 1) {\n\t\t\t\t\tconsole.info(APPEND_LIST_TO_DATABASE, 'NOT IMPLEMENTED for this entity');\n\t\t\t\t} else {\n\t\t\t\t\tfor (key of withKeys[action.entity]) {\n\t\t\t\t\t\tnew_state[action.entity][action.field][key] = [...state[action.entity][action.field][key], ...action.data[key]];\n\t\t\t\t\t\tnew_state.keys_list[action.entity][action.field][key] = makeListOfKeys(new_state[action.entity][action.field][key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.info(APPEND_LIST_TO_DATABASE, 'NEED FIXES');\n\t\t\t\tnew_state[action.entity][action.field] = Array.isArray(action.data) ? [...new_state[action.entity][action.field], ...action.data] : Object.assign(new_state[action.entity][action.field], action.data);\n\t\t\t}\n\t\t\treturn new_state;\n\t\tcase PREPAND_LIST_TO_DATABASE:\n\t\t\tif (withKeys[action.entity]) {\n\t\t\t\tfor (key of withKeys[action.entity]) {\n\t\t\t\t\tnew_state[action.entity][action.field][key] = [...action.data[key], ...state[action.entity][action.field][key]];\n\t\t\t\t\tnew_state.keys_list[action.entity][action.field][key] = makeListOfKeys(\n\t\t\t\t\t\tnew_state[action.entity][action.field][key]\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.info(PREPAND_LIST_TO_DATABASE, 'NEED FIXES');\n\t\t\t\tnew_state[action.entity][action.field] = Object.assign({}, new_state[action.entity][action.field], action.data);\n\t\t\t}\n\t\t\treturn new_state;\n\t\tcase REMOVE_FROM_DATABASE:\n\t\t\tdelete new_state[action.entity][action.field];\n\t\t\treturn new_state;\n\t\tcase UPDATE_IN_DATABASE_BY_ID:\n\t\t\tid = new_state.keys_list[action.entity][action.field][action.key][action.id];\n\t\t\tnew_state[action.entity][action.field][action.key][id] = action.data;\n\t\t\tnew_state.keys_list[action.entity][action.field][action.key][action.data.id] = id;\n\t\t\tdelete new_state.keys_list[action.entity][action.field][action.key][action.id]\n\t\t\treturn new_state;\n\t\tcase UPDATE_IN_FILELOADER:\n\t\t\tif (action.state === 'error') {\n\t\t\t\treturn state;\n\t\t\t} else if (action.state === 'loaded') {\n\t\t\t\treturn state;\n\t\t\t} else if (action.state === 'ready') {\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\tlet i = 0;\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\tconst files = getPathFromObject(new_state, action.destination)\n\t\t\t\tif (files) {\n\t\t\t\t\tfor (i = 0; i < files.length; i++) {\n\t\t\t\t\t\tif (files[i].id === action.id) {\n\t\t\t\t\t\t\tfiles[i] = action.file;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (i === files.length) {\n\t\t\t\t\t\tfiles.push(action.file)\n\t\t\t\t\t}\n\t\t\t\t\treturn Object.assign({}, new_state, assignToPathFromObjectToValue(new_state, action.destination, files));\n\t\t\t\t} else {\n\t\t\t\t\treturn Object.assign({}, new_state, prependToPathFromObjectToValue(new_state, action.destination, [action.file]));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn Object.assign({}, new_state, prependToPathFromObjectToValue(new_state, action.destination, [action.file]));\n\t\t\t}\n\t\tcase RESPONSE_AUTH_USER:\n\t\t\tuserID = action.response.data.result.users[0];\n\t\t\tuser = action.response.data.entities.users[userID];\n\t\t\tnew_state.im = user;\n\t\t\treturn new_state;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n\nconst makeListOfKeys = (list, key = 'id') => {\n\tlet ids = {};\n\tfor (let i = 0; i < list.length; i++) {\n\t\tids[list[i][key]] = i;\n\t}\n\treturn ids;\n}\n\nexport default databaseReducer;\n"]},"metadata":{},"sourceType":"module"}