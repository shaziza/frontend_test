{"ast":null,"code":"import { requestAction } from '../actions/actions';\nexport const API_CALL = 'API_CALL';\nexport default (store => next => action => {\n  let api_call = action[API_CALL];\n\n  if (typeof api_call === 'undefined') {\n    return next(action);\n  }\n\n  let {\n    url,\n    method,\n    params,\n    schema,\n    key,\n    action_type,\n    filters,\n    main,\n    addition_keys\n  } = api_call;\n  method = method.toUpperCase();\n\n  if (key === PRODUCTS_COORDS && store.getState().result[key]) {\n    params['loaded_count'] = store.getState().result[key].length;\n  }\n\n  switch (method) {\n    case 'GET':\n    case 'POST':\n      break;\n\n    default:\n      next(action);\n  }\n\n  store.dispatch(requestAction(key));\n  return request(url, method, params).then(json => {\n    if (json.error !== 0) {\n      // handleError( json.error, store.dispatch );\n      throw new Error(JSON.stringify(json));\n    }\n\n    let data = json.response.items;\n\n    if (addition_keys) {\n      for (let k of addition_keys) {\n        data = {\n          [k]: data\n        };\n      }\n    }\n\n    data = {\n      data: normalize({\n        [key]: data\n      }, schema)\n    };\n\n    if (json.response.last_id) {\n      data.last_id = json.response.last_id;\n    } else if (json.response.last_id === 0) {\n      data.last_id = null;\n    }\n\n    if (json.response.all_count) {\n      data.all_count = json.response.all_count;\n    }\n\n    return data;\n  }).then(json => next({\n    type: action_type,\n    response: json,\n    key\n  }), error => {\n    let message = JSON.parse(error.message);\n    return next({\n      type: RESPONSE_FAIL,\n      main: main || false,\n      error: message.error_text,\n      error_status: message.error,\n      key\n    });\n  });\n});","map":{"version":3,"sources":["/home/aziza/reactapp/src/middlewares/api.js"],"names":["requestAction","API_CALL","store","next","action","api_call","url","method","params","schema","key","action_type","filters","main","addition_keys","toUpperCase","PRODUCTS_COORDS","getState","result","length","dispatch","request","then","json","error","Error","JSON","stringify","data","response","items","k","normalize","last_id","all_count","type","message","parse","RESPONSE_FAIL","error_text","error_status"],"mappings":"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","sourcesContent":["import { requestAction } from '../actions/actions';\n\nexport const API_CALL = 'API_CALL';\n\nexport default store => next => action => {\n\tlet api_call = action[API_CALL];\n\tif (typeof api_call === 'undefined') {\n\t\treturn next(action);\n\t}\n\n\tlet {\n\t\turl,\n\t\tmethod,\n\t\tparams,\n\t\tschema,\n\t\tkey,\n\t\taction_type,\n\t\tfilters,\n\t\tmain,\n\t\taddition_keys\n\t} = api_call;\n\n  method = method.toUpperCase();\n\n\tif (key === PRODUCTS_COORDS && store.getState().result[key]) {\n\t\tparams['loaded_count'] = store.getState().result[key].length;\n\t}\n\n  switch( method ) {\n      case 'GET':\n      case 'POST':\n          break;\n      default:\n          next( action );\n  }\n\tstore.dispatch( requestAction( key ) );\n  return request(url, method, params).then(json => {\n\t\tif (json.error !== 0) {\n\t\t\t// handleError( json.error, store.dispatch );\n\t\t\tthrow new Error(JSON.stringify(json));\n\t\t}\n\n\t\tlet data = json.response.items;\n\t\tif ( addition_keys ) {\n\t\t\tfor ( let k of addition_keys ) {\n\t\t\t\tdata = { [ k ]: data }\n\t\t\t}\n\t\t}\n\t\tdata = { data: normalize( { [ key ]: data }, schema ) };\n\t\tif ( json.response.last_id ) {\n\t\t\tdata.last_id = json.response.last_id;\n\t\t} else if ( json.response.last_id === 0 ) {\n\t\t\tdata.last_id = null;\n\t\t}\n\n\t\tif ( json.response.all_count ) {\n\t\t\tdata.all_count = json.response.all_count;\n\t\t}\n\t\treturn data;\n\t}).then(json => next({\n\t\ttype: action_type,\n\t\tresponse: json,\n\t\tkey,\n\t}), error => {\n\t\tlet message = JSON.parse(error.message);\n\t\treturn next({\n\t\t\ttype: RESPONSE_FAIL,\n\t\t\tmain: main || false,\n\t\t\terror: message.error_text,\n\t\t\terror_status: message.error,\n\t\t\tkey,\n\t\t});\n\t})\n}\n"]},"metadata":{},"sourceType":"module"}