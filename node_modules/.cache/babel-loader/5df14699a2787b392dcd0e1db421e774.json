{"ast":null,"code":"export const getPathFromObjectByArray = (obj, path) => {\n  let key = path.pop();\n  let result = path.length !== 0 ? getPathFromObjectByArray(obj, path) : obj;\n  return result ? result[key] : result;\n};\nexport const getPathFromObject = (obj, path, defaultValue) => {\n  console.log(obj, path, defaultValue);\n  let keys = path.split('.');\n  let result = getPathFromObjectByArray(obj, keys);\n  return result === undefined ? defaultValue : result;\n};\nexport const appendToPathFromObjectToValue = (obj, path, value, options) => assignToPathFromObjectToValue(obj, path, value, appendInArray, options);\nexport const assignToPathFromObjectToValue = (obj, path, value, action, options) => {\n  let keys = path.split('.');\n  return findPathAndAssign(obj, keys, value, action, options);\n};\nexport const findPathAndAssign = (obj, keys, value, action, options) => {\n  if (keys.length === 0) {\n    return action ? action(obj, value, options) : value;\n  }\n\n  let key = keys.shift();\n  let curr = Array.isArray(obj[key]) ? [...obj[key]] : Object.assign({}, obj[key]);\n  return Object.assign(obj, {\n    [key]: findPathAndAssign(curr, keys, value, action, options)\n  });\n};","map":{"version":3,"sources":["/home/aziza/reactapp/src/helpers.js"],"names":["getPathFromObjectByArray","obj","path","key","pop","result","length","getPathFromObject","defaultValue","console","log","keys","split","undefined","appendToPathFromObjectToValue","value","options","assignToPathFromObjectToValue","appendInArray","action","findPathAndAssign","shift","curr","Array","isArray","Object","assign"],"mappings":"AAAA,OAAO,MAAMA,wBAAwB,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AACtD,MAAIC,GAAG,GAAGD,IAAI,CAACE,GAAL,EAAV;AACA,MAAIC,MAAM,GAAGH,IAAI,CAACI,MAAL,KAAgB,CAAhB,GAAoBN,wBAAwB,CAACC,GAAD,EAAMC,IAAN,CAA5C,GAA0DD,GAAvE;AACA,SAAOI,MAAM,GAAGA,MAAM,CAACF,GAAD,CAAT,GAAiBE,MAA9B;AACA,CAJM;AAMP,OAAO,MAAME,iBAAiB,GAAG,CAACN,GAAD,EAAMC,IAAN,EAAYM,YAAZ,KAA6B;AAC7DC,EAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ,EAAiBC,IAAjB,EAAuBM,YAAvB;AACA,MAAIG,IAAI,GAAGT,IAAI,CAACU,KAAL,CAAW,GAAX,CAAX;AACA,MAAIP,MAAM,GAAGL,wBAAwB,CAACC,GAAD,EAAMU,IAAN,CAArC;AACA,SAAON,MAAM,KAAKQ,SAAX,GAAuBL,YAAvB,GAAsCH,MAA7C;AACA,CALM;AAMP,OAAO,MAAMS,6BAA6B,GAAG,CAACb,GAAD,EAAMC,IAAN,EAAYa,KAAZ,EAAmBC,OAAnB,KAA+BC,6BAA6B,CAAChB,GAAD,EAAMC,IAAN,EAAYa,KAAZ,EAAmBG,aAAnB,EAAkCF,OAAlC,CAAlG;AAEP,OAAO,MAAMC,6BAA6B,GAAG,CAAChB,GAAD,EAAMC,IAAN,EAAYa,KAAZ,EAAmBI,MAAnB,EAA2BH,OAA3B,KAAuC;AACnF,MAAIL,IAAI,GAAGT,IAAI,CAACU,KAAL,CAAW,GAAX,CAAX;AACA,SAAOQ,iBAAiB,CAACnB,GAAD,EAAMU,IAAN,EAAYI,KAAZ,EAAmBI,MAAnB,EAA2BH,OAA3B,CAAxB;AACA,CAHM;AAIP,OAAO,MAAMI,iBAAiB,GAAG,CAACnB,GAAD,EAAMU,IAAN,EAAYI,KAAZ,EAAmBI,MAAnB,EAA2BH,OAA3B,KAAuC;AACvE,MAAIL,IAAI,CAACL,MAAL,KAAgB,CAApB,EAAuB;AACtB,WAAOa,MAAM,GAAGA,MAAM,CAAClB,GAAD,EAAMc,KAAN,EAAaC,OAAb,CAAT,GAAiCD,KAA9C;AACA;;AACD,MAAIZ,GAAG,GAAGQ,IAAI,CAACU,KAAL,EAAV;AACA,MAAIC,IAAI,GAAGC,KAAK,CAACC,OAAN,CAAcvB,GAAG,CAACE,GAAD,CAAjB,IAA0B,CAAC,GAAGF,GAAG,CAACE,GAAD,CAAP,CAA1B,GAA0CsB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBzB,GAAG,CAACE,GAAD,CAArB,CAArD;AACA,SAAOsB,MAAM,CAACC,MAAP,CAAczB,GAAd,EAAmB;AAAC,KAACE,GAAD,GAAOiB,iBAAiB,CAACE,IAAD,EAAOX,IAAP,EAAaI,KAAb,EAAoBI,MAApB,EAA4BH,OAA5B;AAAzB,GAAnB,CAAP;AACA,CAPM","sourcesContent":["export const getPathFromObjectByArray = (obj, path) => {\n\tlet key = path.pop();\n\tlet result = path.length !== 0 ? getPathFromObjectByArray(obj, path) : obj;\n\treturn result ? result[key] : result;\n}\n\nexport const getPathFromObject = (obj, path, defaultValue) => {\n\tconsole.log(obj, path, defaultValue);\n\tlet keys = path.split('.');\n\tlet result = getPathFromObjectByArray(obj, keys);\n\treturn result === undefined ? defaultValue : result;\n}\nexport const appendToPathFromObjectToValue = (obj, path, value, options) => assignToPathFromObjectToValue(obj, path, value, appendInArray, options);\n\nexport const assignToPathFromObjectToValue = (obj, path, value, action, options) => {\n\tlet keys = path.split('.');\n\treturn findPathAndAssign(obj, keys, value, action, options);\n}\nexport const findPathAndAssign = (obj, keys, value, action, options) => {\n\tif (keys.length === 0) {\n\t\treturn action ? action(obj, value, options) : value;\n\t}\n\tlet key = keys.shift();\n\tlet curr = Array.isArray(obj[key]) ? [...obj[key]] : Object.assign({}, obj[key]);\n\treturn Object.assign(obj, {[key]: findPathAndAssign(curr, keys, value, action, options)});\n}\n"]},"metadata":{},"sourceType":"module"}