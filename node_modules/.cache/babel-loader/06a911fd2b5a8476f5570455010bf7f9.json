{"ast":null,"code":"import { ADD_TO_DATABASE, UPDATE_LIST_IN_DATABASE, PREPAND_LIST_TO_DATABASE, MERGE_ENTITIES_IN_DATABASE, SET_IN_DATABASE_BY_PATH, APPEND_IN_DATABASE_BY_PATH, PREPEND_IN_DATABASE_BY_PATH, REMOVE_IN_DATABASE_BY_PATH, MAKE_INDEX_IN_DATABASE_BY_PATH, REQUEST_DATA } from './actionsTypes';\n/***DATABASE***/\n\nexport const setFieldInDatabase = (entity, field, data) => {\n  return {\n    type: ADD_TO_DATABASE,\n    entity,\n    field,\n    data\n  };\n};\nexport const appendToListInDatabase = (entity, field, data) => {\n  return {\n    type: UPDATE_LIST_IN_DATABASE,\n    entity,\n    field,\n    data\n  };\n};\nexport const prependToListInDatabase = (entity, field, data) => {\n  return {\n    type: PREPAND_LIST_TO_DATABASE,\n    entity,\n    field,\n    data\n  };\n};\nexport function mergeEntitiesInDB(entities) {\n  return {\n    type: MERGE_ENTITIES_IN_DATABASE,\n    entities\n  };\n}\n/**\n * Устанавливает значение поля в database\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\n\nexport function setInDatabaseByPath(data, path) {\n  return {\n    type: SET_IN_DATABASE_BY_PATH,\n    data,\n    path\n  };\n}\n/**\n * Добавляет (deepMerge) значение поля в database\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\n\nexport function appendInDatabaseByPath(data, path, options) {\n  return {\n    type: APPEND_IN_DATABASE_BY_PATH,\n    data,\n    path,\n    options\n  };\n}\n/**\n * Добавляет значение поля в начало массива расположенного в database по пути path\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\n\nexport function prependInDatabaseByPath(data, path) {\n  return {\n    type: PREPEND_IN_DATABASE_BY_PATH,\n    data,\n    path\n  };\n}\nexport function removeInDatabaseByPath(key, path) {\n  return {\n    type: REMOVE_IN_DATABASE_BY_PATH,\n    key,\n    path\n  };\n}\nexport function makeIndexInDatabaseByPath(path, key) {\n  return {\n    type: MAKE_INDEX_IN_DATABASE_BY_PATH,\n    path,\n    key\n  };\n}\nexport const requestAction = key => ({\n  type: REQUEST_DATA,\n  key: key\n});","map":{"version":3,"sources":["/home/aziza/reactapp/src/actions/actions.js"],"names":["ADD_TO_DATABASE","UPDATE_LIST_IN_DATABASE","PREPAND_LIST_TO_DATABASE","MERGE_ENTITIES_IN_DATABASE","SET_IN_DATABASE_BY_PATH","APPEND_IN_DATABASE_BY_PATH","PREPEND_IN_DATABASE_BY_PATH","REMOVE_IN_DATABASE_BY_PATH","MAKE_INDEX_IN_DATABASE_BY_PATH","REQUEST_DATA","setFieldInDatabase","entity","field","data","type","appendToListInDatabase","prependToListInDatabase","mergeEntitiesInDB","entities","setInDatabaseByPath","path","appendInDatabaseByPath","options","prependInDatabaseByPath","removeInDatabaseByPath","key","makeIndexInDatabaseByPath","requestAction"],"mappings":"AAAA,SACIA,eADJ,EAEIC,uBAFJ,EAGIC,wBAHJ,EAIIC,0BAJJ,EAKIC,uBALJ,EAMIC,0BANJ,EAOIC,2BAPJ,EAQIC,0BARJ,EASIC,8BATJ,EAUIC,YAVJ,QAWO,gBAXP;AAYA;;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgBC,IAAhB,KAAyB;AAC1D,SAAO;AACNC,IAAAA,IAAI,EAAEd,eADA;AAENW,IAAAA,MAFM;AAGNC,IAAAA,KAHM;AAINC,IAAAA;AAJM,GAAP;AAMA,CAPM;AAQP,OAAO,MAAME,sBAAsB,GAAG,CAACJ,MAAD,EAASC,KAAT,EAAgBC,IAAhB,KAAyB;AAC9D,SAAO;AACNC,IAAAA,IAAI,EAAEb,uBADA;AAENU,IAAAA,MAFM;AAGNC,IAAAA,KAHM;AAINC,IAAAA;AAJM,GAAP;AAMA,CAPM;AAQP,OAAO,MAAMG,uBAAuB,GAAG,CAACL,MAAD,EAASC,KAAT,EAAgBC,IAAhB,KAAyB;AAC/D,SAAO;AACNC,IAAAA,IAAI,EAAEZ,wBADA;AAENS,IAAAA,MAFM;AAGNC,IAAAA,KAHM;AAINC,IAAAA;AAJM,GAAP;AAMA,CAPM;AASP,OAAO,SAASI,iBAAT,CAA2BC,QAA3B,EAAqC;AAC3C,SAAO;AACNJ,IAAAA,IAAI,EAAEX,0BADA;AAENe,IAAAA;AAFM,GAAP;AAIA;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BN,IAA7B,EAAmCO,IAAnC,EAAyC;AAC/C,SAAO;AACNN,IAAAA,IAAI,EAAEV,uBADA;AAENS,IAAAA,IAFM;AAEAO,IAAAA;AAFA,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,sBAAT,CAAgCR,IAAhC,EAAsCO,IAAtC,EAA4CE,OAA5C,EAAqD;AAC3D,SAAO;AACNR,IAAAA,IAAI,EAAET,0BADA;AAENQ,IAAAA,IAFM;AAEAO,IAAAA,IAFA;AAEME,IAAAA;AAFN,GAAP;AAIA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAiCV,IAAjC,EAAuCO,IAAvC,EAA6C;AACnD,SAAO;AACNN,IAAAA,IAAI,EAAER,2BADA;AAENO,IAAAA,IAFM;AAEAO,IAAAA;AAFA,GAAP;AAIA;AACD,OAAO,SAASI,sBAAT,CAAgCC,GAAhC,EAAqCL,IAArC,EAA2C;AACjD,SAAO;AACNN,IAAAA,IAAI,EAAEP,0BADA;AAENkB,IAAAA,GAFM;AAEDL,IAAAA;AAFC,GAAP;AAIA;AACD,OAAO,SAASM,yBAAT,CAAmCN,IAAnC,EAAyCK,GAAzC,EAA8C;AACpD,SAAO;AACNX,IAAAA,IAAI,EAAEN,8BADA;AAENY,IAAAA,IAFM;AAGNK,IAAAA;AAHM,GAAP;AAKA;AACD,OAAO,MAAME,aAAa,GAAKF,GAAF,KAC5B;AACGX,EAAAA,IAAI,EAAEL,YADT;AAEGgB,EAAAA,GAAG,EAAEA;AAFR,CAD4B,CAAtB","sourcesContent":["import {\n    ADD_TO_DATABASE,\n    UPDATE_LIST_IN_DATABASE,\n    PREPAND_LIST_TO_DATABASE,\n    MERGE_ENTITIES_IN_DATABASE,\n    SET_IN_DATABASE_BY_PATH,\n    APPEND_IN_DATABASE_BY_PATH,\n    PREPEND_IN_DATABASE_BY_PATH,\n    REMOVE_IN_DATABASE_BY_PATH,\n    MAKE_INDEX_IN_DATABASE_BY_PATH,\n    REQUEST_DATA\n} from './actionsTypes';\n/***DATABASE***/\nexport const setFieldInDatabase = (entity, field, data) => {\n\treturn {\n\t\ttype: ADD_TO_DATABASE,\n\t\tentity,\n\t\tfield,\n\t\tdata,\n\t};\n}\nexport const appendToListInDatabase = (entity, field, data) => {\n\treturn {\n\t\ttype: UPDATE_LIST_IN_DATABASE,\n\t\tentity,\n\t\tfield,\n\t\tdata\n\t};\n}\nexport const prependToListInDatabase = (entity, field, data) => {\n\treturn {\n\t\ttype: PREPAND_LIST_TO_DATABASE,\n\t\tentity,\n\t\tfield,\n\t\tdata\n\t};\n}\n\nexport function mergeEntitiesInDB(entities) {\n\treturn {\n\t\ttype: MERGE_ENTITIES_IN_DATABASE,\n\t\tentities\n\t};\n}\n/**\n * Устанавливает значение поля в database\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\nexport function setInDatabaseByPath(data, path) {\n\treturn {\n\t\ttype: SET_IN_DATABASE_BY_PATH,\n\t\tdata, path\n\t};\n}\n\n/**\n * Добавляет (deepMerge) значение поля в database\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\nexport function appendInDatabaseByPath(data, path, options) {\n\treturn {\n\t\ttype: APPEND_IN_DATABASE_BY_PATH,\n\t\tdata, path, options\n\t};\n}\n\n/**\n * Добавляет значение поля в начало массива расположенного в database по пути path\n * @param {Any} data Данные для вставки\n * @param {String} path Путь для вставки\n */\nexport function prependInDatabaseByPath(data, path) {\n\treturn {\n\t\ttype: PREPEND_IN_DATABASE_BY_PATH,\n\t\tdata, path\n\t};\n}\nexport function removeInDatabaseByPath(key, path) {\n\treturn {\n\t\ttype: REMOVE_IN_DATABASE_BY_PATH,\n\t\tkey, path\n\t};\n}\nexport function makeIndexInDatabaseByPath(path, key) {\n\treturn {\n\t\ttype: MAKE_INDEX_IN_DATABASE_BY_PATH,\n\t\tpath,\n\t\tkey,\n\t};\n}\nexport const requestAction = ( key ) =>\n({\n    type: REQUEST_DATA,\n    key: key,\n});"]},"metadata":{},"sourceType":"module"}