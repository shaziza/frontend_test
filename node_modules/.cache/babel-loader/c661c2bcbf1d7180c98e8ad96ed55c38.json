{"ast":null,"code":"import { requestAction } from './actions/actions';\nimport { RESPONSE_FAIL } from './actions/actionsTypes';\nimport { request } from \"./actions/request\";\nexport const API_CALL = 'API_CALL';\n/* eslint-disable */\n\n/* eslint-enable */\n// const handleError = ( errorCode ) => {\n// \tswitch( errorCode ) {\n// \t  case 404:\n//       this.props.history.push( '/404' );\n//       break;\n// \t  default:\n//       break;\n// \t}\n// }\n\nexport default (store => next => action => {\n  let api_call = action[API_CALL];\n\n  if (typeof api_call === 'undefined') {\n    return next(action);\n  }\n\n  let {\n    url,\n    method,\n    params,\n    schema,\n    key,\n    action_type,\n    filters,\n    main,\n    addition_keys\n  } = api_call;\n  method = method.toUpperCase();\n\n  if (filters) {\n    let f = Object.assign({}, store.getState().filters[key]);\n\n    if (f) {\n      f.distance = f.distance === undefined || f.distance > 50 ? 0 : f.distance; // if more than 50 then unlimited\n\n      f.rating = f.rating !== undefined && f.rating >= 4; // if more than 4 then true\n\n      let ids = [];\n      let values = [];\n\n      for (let prop_id in f.properties) {\n        if (f.properties[prop_id] != 0) {\n          ids.push(prop_id);\n          values.push(f.properties[prop_id]);\n        }\n      }\n\n      if (ids.length > 0) {\n        params['properties[id]'] = ids.join(',');\n        params['properties[value]'] = values.join(',');\n      }\n\n      params['filters'] = f;\n    }\n  }\n\n  switch (method) {\n    case 'GET':\n    case 'POST':\n      break;\n\n    default:\n      next(action);\n  }\n\n  store.dispatch(requestAction(key));\n  return request(url, method, params).then(json => {\n    if (json.error !== 0) {\n      // handleError( json.error, store.dispatch );\n      throw new Error(JSON.stringify(json));\n    }\n\n    let data = json.response.items;\n\n    if (addition_keys) {\n      for (let k of addition_keys) {\n        data = {\n          [k]: data\n        };\n      }\n    }\n\n    if (json.response.last_id) {\n      data.last_id = json.response.last_id;\n    } else if (json.response.last_id === 0) {\n      data.last_id = null;\n    }\n\n    if (json.response.all_count) {\n      data.all_count = json.response.all_count;\n    }\n\n    return data;\n  }).then(json => next({\n    type: action_type,\n    response: json,\n    key\n  }), error => {\n    let message = JSON.parse(error.message);\n    return next({\n      type: RESPONSE_FAIL,\n      main: main || false,\n      error: message.error_text,\n      error_status: message.error,\n      key\n    });\n  });\n});","map":{"version":3,"sources":["/home/aziza/reactapp/src/api.js"],"names":["requestAction","RESPONSE_FAIL","request","API_CALL","store","next","action","api_call","url","method","params","schema","key","action_type","filters","main","addition_keys","toUpperCase","f","Object","assign","getState","distance","undefined","rating","ids","values","prop_id","properties","push","length","join","dispatch","then","json","error","Error","JSON","stringify","data","response","items","k","last_id","all_count","type","message","parse","error_text","error_status"],"mappings":"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","sourcesContent":["\nimport { requestAction } from './actions/actions';\nimport { RESPONSE_FAIL } from './actions/actionsTypes';\nimport { request } from \"./actions/request\";\n\nexport const API_CALL = 'API_CALL';\n\n/* eslint-disable */\n/* eslint-enable */\n// const handleError = ( errorCode ) => {\n// \tswitch( errorCode ) {\n// \t  case 404:\n//       this.props.history.push( '/404' );\n//       break;\n// \t  default:\n//       break;\n// \t}\n// }\n\nexport default store => next => action => {\n\tlet api_call = action[API_CALL];\n\tif (typeof api_call === 'undefined') {\n\t\treturn next(action);\n\t}\n\n\tlet {\n\t\turl,\n\t\tmethod,\n\t\tparams,\n\t\tschema,\n\t\tkey,\n\t\taction_type,\n\t\tfilters,\n\t\tmain,\n\t\taddition_keys\n\t} = api_call;\n\n  method = method.toUpperCase();\n\n  if ( filters ) {\n\t\tlet f = Object.assign({}, store.getState().filters[key]);\n\t\tif (f) {\n\n\t\t\tf.distance = (f.distance === undefined || f.distance > 50) ? 0 : f.distance; // if more than 50 then unlimited\n\t\t\tf.rating = (f.rating !== undefined && f.rating >= 4); // if more than 4 then true\n\t\t\tlet ids = [];\n\t\t\tlet values = [];\n\t\t\tfor (let prop_id in f.properties) {\n\t\t\t\tif (f.properties[prop_id] != 0) {\n\t\t\t\t\tids.push(prop_id);\n\t\t\t\t\tvalues.push(f.properties[prop_id])\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ids.length > 0) {\n\t\t\t\tparams['properties[id]'] = ids.join(',');\n\t\t\t\tparams['properties[value]'] = values.join(',');\n\t\t\t}\n\t\t\tparams['filters'] = f;\n\t\t}\n\t}\n  switch( method ) {\n      case 'GET':\n      case 'POST':\n          break;\n      default:\n          next( action );\n  }\n\tstore.dispatch( requestAction( key ) );\n  return request(url, method, params).then(json => {\n\t\tif (json.error !== 0) {\n\t\t\t// handleError( json.error, store.dispatch );\n\t\t\tthrow new Error(JSON.stringify(json));\n\t\t}\n\n\t\tlet data = json.response.items;\n\t\tif ( addition_keys ) {\n\t\t\tfor ( let k of addition_keys ) {\n\t\t\t\tdata = { [ k ]: data }\n\t\t\t}\n\t\t}\n\t\tif ( json.response.last_id ) {\n\t\t\tdata.last_id = json.response.last_id;\n\t\t} else if ( json.response.last_id === 0 ) {\n\t\t\tdata.last_id = null;\n\t\t}\n\n\t\tif ( json.response.all_count ) {\n\t\t\tdata.all_count = json.response.all_count;\n\t\t}\n\t\treturn data;\n\t}).then(json => next({\n\t\ttype: action_type,\n\t\tresponse: json,\n\t\tkey,\n\t}), error => {\n\t\tlet message = JSON.parse(error.message);\n\t\treturn next({\n\t\t\ttype: RESPONSE_FAIL,\n\t\t\tmain: main || false,\n\t\t\terror: message.error_text,\n\t\t\terror_status: message.error,\n\t\t\tkey,\n\t\t});\n\t})\n}\n"]},"metadata":{},"sourceType":"module"}