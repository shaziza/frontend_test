{"ast":null,"code":"import databaseReducer from './database';\n/**\n * Creates array of fetched results - array with ids of entities\n * @param  {Object} [state={}] [description]\n * @param  {[type]} action     [description]\n * @return {[type]}            [description]\n */\n\nimport { SET_LAST_ERROR } from '../actions/actionsTypes';\n\nconst environmentReducer = (state = {\n  lastError: ''\n}, action) => {\n  let new_state = Object.assign({}, state);\n\n  switch (action.type) {\n    case SET_LAST_ERROR:\n      new_state.lastError = action.text;\n      return new_state;\n\n    default:\n      return state;\n  }\n};\n\nexport default ((state = {}, action) => {\n  return {\n    environment: environmentReducer(state.environment, action),\n    database: databaseReducer(state.database, action)\n  };\n});","map":{"version":3,"sources":["/home/aziza/reactapp/src/reducers/app.js"],"names":["databaseReducer","SET_LAST_ERROR","environmentReducer","state","lastError","action","new_state","Object","assign","type","text","environment","database"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,YAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SACCC,cADD,QAEO,yBAFP;;AAIA,MAAMC,kBAAkB,GAAG,CAAEC,KAAK,GAAG;AACpCC,EAAAA,SAAS,EAAE;AADyB,CAAV,EAExBC,MAFwB,KAEZ;AACd,MAAIC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,CAAhB;;AACA,UAAQE,MAAM,CAACI,IAAf;AACC,SAAKR,cAAL;AACCK,MAAAA,SAAS,CAACF,SAAV,GAAsBC,MAAM,CAACK,IAA7B;AACA,aAAOJ,SAAP;;AAED;AACC,aAAOH,KAAP;AANF;AAQA,CAZD;;AAcA,gBAAe,CAAEA,KAAK,GAAG,EAAV,EAAcE,MAAd,KAA0B;AACxC,SAAO;AACNM,IAAAA,WAAW,EAAGT,kBAAkB,CAACC,KAAK,CAACQ,WAAP,EAAoBN,MAApB,CAD1B;AAENO,IAAAA,QAAQ,EAAKZ,eAAe,CAACG,KAAK,CAACS,QAAP,EAAiBP,MAAjB;AAFtB,GAAP;AAIA,CALD","sourcesContent":["import databaseReducer from './database'\n\n/**\n * Creates array of fetched results - array with ids of entities\n * @param  {Object} [state={}] [description]\n * @param  {[type]} action     [description]\n * @return {[type]}            [description]\n */\nimport {\n\tSET_LAST_ERROR\n} from '../actions/actionsTypes';\n\nconst environmentReducer = ( state = {\n\tlastError: '',\n}, action ) => {\n\tlet new_state = Object.assign({}, state);\n\tswitch (action.type) {\n\t\tcase SET_LAST_ERROR:\n\t\t\tnew_state.lastError = action.text\n\t\t\treturn new_state;\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default ( state = {}, action ) => {\n\treturn {\n\t\tenvironment:\t\tenvironmentReducer(state.environment, action),\n\t\tdatabase:\t\t\t\tdatabaseReducer(state.database, action),\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}