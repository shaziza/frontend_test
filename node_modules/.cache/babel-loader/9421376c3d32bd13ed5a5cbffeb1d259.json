{"ast":null,"code":"import { setBrowserTabId, setBrowserTabState, setInDatabaseByPath } from '../actions/actions';\nimport { getCookieDomain, setCookieTabId } from '../cookiesDispatchers';\nimport { CONSTANTS_KEY } from '../actions/keys';\nimport { request } from \"../../api/request\";\nimport { makeRandomId } from '../helpers';\nimport Cookies from \"js-cookie\";\nexport const ENVIRONMENT = 'ENVIRONMENT';\nexport const CAN_PLAY_AUCTIONS = 'CAN_PLAY_AUCTIONS';\nexport function setCanPlayAuction() {\n  let currentTimeStamp = parseInt(new Date() / 1000);\n  request('/getTime').then(data => {\n    let serverTimeStamp = parseInt(data);\n    let diff = Math.abs(serverTimeStamp - currentTimeStamp);\n    let canPlay = diff <= 1; // saveLog(canPlay);\n\n    Cookies.set(CAN_PLAY_AUCTIONS, canPlay, {\n      expires: 356,\n      domain: getCookieDomain()\n    });\n    setInDatabaseByPath(canPlay, CAN_PLAY_AUCTIONS);\n  });\n}\nexport function getCanPlayAuction() {\n  return Cookies.get(CAN_PLAY_AUCTIONS);\n}\n\nconst onTabVisibilityChange = (() => {\n  let stateKey,\n      eventKey,\n      keys = {\n    hidden: \"visibilitychange\",\n    webkitHidden: \"webkitvisibilitychange\",\n    mozHidden: \"mozvisibilitychange\",\n    msHidden: \"msvisibilitychange\"\n  };\n\n  for (stateKey in keys) {\n    if (stateKey in document) {\n      eventKey = keys[stateKey];\n      break;\n    }\n  }\n  /**\n   * Изменение вкладки\n   * @param\t{Function} callback Функция для вызова при смене вкладки в браузере\n   * @return {boolean}\t\t\t\t\t Состояние вкладки: true - скрыта, false - активна\n   */\n\n\n  return function (callback) {\n    if (callback) document.addEventListener(eventKey, callback);\n    return document[stateKey];\n  };\n})();\n\nexport default (store => next => action => {\n  let params = action[ENVIRONMENT];\n\n  if (typeof params === 'undefined') {\n    return next(action);\n  }\n\n  let {\n    action_type\n  } = params;\n  let tabId = makeRandomId(1000);\n  /***CONSTANTS***/\n\n  request(`/api/global/getConstants`).then(data => {\n    store.dispatch(setInDatabaseByPath(data.response.items[0], CONSTANTS_KEY));\n\n    window.getConstant = name => {\n      return name ? data.response.items[0][name] : data.response.items[0];\n    };\n  });\n  /**\n   * set state of tab when user changes tabs - hidden(true) or visible(false)\n   * set this tab id if visible\n   * error: set to true on first load\n   */\n\n  onTabVisibilityChange(() => {\n    let hidden = onTabVisibilityChange();\n    store.dispatch(setBrowserTabState(hidden));\n\n    if (!hidden) {\n      store.dispatch(setCookieTabId(tabId));\n    }\n  });\n  store.dispatch(setCookieTabId(tabId));\n  store.dispatch(setBrowserTabId(tabId));\n  next({\n    type: action_type\n  });\n});","map":{"version":3,"sources":["/home/aziza/reactapp/src/middlewares/environment.js"],"names":["setBrowserTabId","setBrowserTabState","setInDatabaseByPath","getCookieDomain","setCookieTabId","CONSTANTS_KEY","request","makeRandomId","Cookies","ENVIRONMENT","CAN_PLAY_AUCTIONS","setCanPlayAuction","currentTimeStamp","parseInt","Date","then","data","serverTimeStamp","diff","Math","abs","canPlay","set","expires","domain","getCanPlayAuction","get","onTabVisibilityChange","stateKey","eventKey","keys","hidden","webkitHidden","mozHidden","msHidden","document","callback","addEventListener","store","next","action","params","action_type","tabId","dispatch","response","items","window","getConstant","name","type"],"mappings":"AAAA,SAAQA,eAAR,EAAyBC,kBAAzB,EAA6CC,mBAA7C,QAAuE,oBAAvE;AACA,SAAQC,eAAR,EAAyBC,cAAzB,QAA8C,uBAA9C;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SAAQC,OAAR,QAAsB,mBAAtB;AACA,SAAQC,YAAR,QAA2B,YAA3B;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,MAAMC,WAAW,GAAG,aAApB;AAEP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,SAASC,iBAAT,GAA6B;AACnC,MAAIC,gBAAgB,GAAGC,QAAQ,CAAC,IAAIC,IAAJ,KAAW,IAAZ,CAA/B;AACAR,EAAAA,OAAO,CAAC,UAAD,CAAP,CAAoBS,IAApB,CAAyBC,IAAI,IAAI;AAChC,QAAIC,eAAe,GAAGJ,QAAQ,CAACG,IAAD,CAA9B;AACA,QAAIE,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASH,eAAe,GAACL,gBAAzB,CAAX;AACA,QAAIS,OAAO,GAAGH,IAAI,IAAI,CAAtB,CAHgC,CAIhC;;AACAV,IAAAA,OAAO,CAACc,GAAR,CAAYZ,iBAAZ,EAA+BW,OAA/B,EAAwC;AAACE,MAAAA,OAAO,EAAE,GAAV;AAAeC,MAAAA,MAAM,EAAErB,eAAe;AAAtC,KAAxC;AACAD,IAAAA,mBAAmB,CAACmB,OAAD,EAAUX,iBAAV,CAAnB;AACA,GAPD;AAQA;AACD,OAAO,SAASe,iBAAT,GAA6B;AACnC,SAAOjB,OAAO,CAACkB,GAAR,CAAYhB,iBAAZ,CAAP;AACA;;AACD,MAAMiB,qBAAqB,GAAG,CAAC,MAAM;AACpC,MAAIC,QAAJ;AAAA,MAAcC,QAAd;AAAA,MAAwBC,IAAI,GAAG;AAC9BC,IAAAA,MAAM,EAAE,kBADsB;AAE9BC,IAAAA,YAAY,EAAE,wBAFgB;AAG9BC,IAAAA,SAAS,EAAE,qBAHmB;AAI9BC,IAAAA,QAAQ,EAAE;AAJoB,GAA/B;;AAMA,OAAKN,QAAL,IAAiBE,IAAjB,EAAuB;AACtB,QAAIF,QAAQ,IAAIO,QAAhB,EAA0B;AACxBN,MAAAA,QAAQ,GAAGC,IAAI,CAACF,QAAD,CAAf;AACA;AACD;AACD;AACD;AACD;AACA;AACA;AACA;;;AACC,SAAO,UAASQ,QAAT,EAAmB;AACzB,QAAIA,QAAJ,EAAcD,QAAQ,CAACE,gBAAT,CAA0BR,QAA1B,EAAoCO,QAApC;AACd,WAAOD,QAAQ,CAACP,QAAD,CAAf;AACA,GAHD;AAIA,CAtB6B,GAA9B;;AAuBA,gBAAeU,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACzC,MAAIC,MAAM,GAAGD,MAAM,CAAC/B,WAAD,CAAnB;;AACA,MAAI,OAAOgC,MAAP,KAAkB,WAAtB,EAAmC;AAClC,WAAOF,IAAI,CAAEC,MAAF,CAAX;AACA;;AACD,MAAI;AACHE,IAAAA;AADG,MAEAD,MAFJ;AAGA,MAAIE,KAAK,GAAGpC,YAAY,CAAC,IAAD,CAAxB;AACA;;AACAD,EAAAA,OAAO,CAAE,0BAAF,CAAP,CAAoCS,IAApC,CAAyCC,IAAI,IAAI;AAChDsB,IAAAA,KAAK,CAACM,QAAN,CAAe1C,mBAAmB,CAACc,IAAI,CAAC6B,QAAL,CAAcC,KAAd,CAAoB,CAApB,CAAD,EAAyBzC,aAAzB,CAAlC;;AACA0C,IAAAA,MAAM,CAACC,WAAP,GAAsBC,IAAD,IAAU;AAC9B,aAAOA,IAAI,GAAGjC,IAAI,CAAC6B,QAAL,CAAcC,KAAd,CAAoB,CAApB,EAAuBG,IAAvB,CAAH,GAAkCjC,IAAI,CAAC6B,QAAL,CAAcC,KAAd,CAAoB,CAApB,CAA7C;AACA,KAFD;AAGA,GALD;AAOA;AACD;AACA;AACA;AACA;;AACCnB,EAAAA,qBAAqB,CAAC,MAAM;AAC3B,QAAII,MAAM,GAAGJ,qBAAqB,EAAlC;AACAW,IAAAA,KAAK,CAACM,QAAN,CAAe3C,kBAAkB,CAAC8B,MAAD,CAAjC;;AACA,QAAI,CAACA,MAAL,EAAa;AACZO,MAAAA,KAAK,CAACM,QAAN,CAAexC,cAAc,CAACuC,KAAD,CAA7B;AACA;AACD,GANoB,CAArB;AAOAL,EAAAA,KAAK,CAACM,QAAN,CAAexC,cAAc,CAACuC,KAAD,CAA7B;AACAL,EAAAA,KAAK,CAACM,QAAN,CAAe5C,eAAe,CAAC2C,KAAD,CAA9B;AACAJ,EAAAA,IAAI,CAAC;AACJW,IAAAA,IAAI,EAAER;AADF,GAAD,CAAJ;AAGA,CAlCD","sourcesContent":["import {setBrowserTabId, setBrowserTabState, setInDatabaseByPath} from '../actions/actions';\nimport {getCookieDomain, setCookieTabId} from '../cookiesDispatchers';\nimport {CONSTANTS_KEY} from '../actions/keys';\nimport {request} from \"../../api/request\";\nimport {makeRandomId} from '../helpers'\nimport Cookies from \"js-cookie\";\n\nexport const ENVIRONMENT = 'ENVIRONMENT';\n\nexport const CAN_PLAY_AUCTIONS = 'CAN_PLAY_AUCTIONS';\nexport function setCanPlayAuction() {\n\tlet currentTimeStamp = parseInt(new Date()/1000);\n\trequest('/getTime').then(data => {\n\t\tlet serverTimeStamp = parseInt(data);\n\t\tlet diff = Math.abs(serverTimeStamp-currentTimeStamp);\n\t\tlet canPlay = diff <= 1;\n\t\t// saveLog(canPlay);\n\t\tCookies.set(CAN_PLAY_AUCTIONS, canPlay, {expires: 356, domain: getCookieDomain()});\n\t\tsetInDatabaseByPath(canPlay, CAN_PLAY_AUCTIONS);\n\t});\n}\nexport function getCanPlayAuction() {\n\treturn Cookies.get(CAN_PLAY_AUCTIONS);\n}\nconst onTabVisibilityChange = (() => {\n\tlet stateKey, eventKey, keys = {\n\t\thidden: \"visibilitychange\",\n\t\twebkitHidden: \"webkitvisibilitychange\",\n\t\tmozHidden: \"mozvisibilitychange\",\n\t\tmsHidden: \"msvisibilitychange\"\n\t};\n\tfor (stateKey in keys) {\n\t\tif (stateKey in document) {\n\t\t\t\teventKey = keys[stateKey];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t/**\n\t * Изменение вкладки\n\t * @param\t{Function} callback Функция для вызова при смене вкладки в браузере\n\t * @return {boolean}\t\t\t\t\t Состояние вкладки: true - скрыта, false - активна\n\t */\n\treturn function(callback) {\n\t\tif (callback) document.addEventListener(eventKey, callback);\n\t\treturn document[stateKey];\n\t}\n})();\nexport default store => next => action => {\n\tlet params = action[ENVIRONMENT];\n\tif (typeof params === 'undefined') {\n\t\treturn next( action );\n\t}\n\tlet {\n\t\taction_type,\n\t} = params;\n\tlet tabId = makeRandomId(1000);\n\t/***CONSTANTS***/\n\trequest(`/api/global/getConstants`).then(data => {\n\t\tstore.dispatch(setInDatabaseByPath(data.response.items[0], CONSTANTS_KEY));\n\t\twindow.getConstant = (name) => {\n\t\t\treturn name ? data.response.items[0][name] : data.response.items[0];\n\t\t}\n\t});\n\n\t/**\n\t * set state of tab when user changes tabs - hidden(true) or visible(false)\n\t * set this tab id if visible\n\t * error: set to true on first load\n\t */\n\tonTabVisibilityChange(() => {\n\t\tlet hidden = onTabVisibilityChange();\n\t\tstore.dispatch(setBrowserTabState(hidden));\n\t\tif (!hidden) {\n\t\t\tstore.dispatch(setCookieTabId(tabId));\n\t\t}\n\t});\n\tstore.dispatch(setCookieTabId(tabId));\n\tstore.dispatch(setBrowserTabId(tabId));\n\tnext({\n\t\ttype: action_type,\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}