{"ast":null,"code":"import { requestAction } from './actions/actions';\nimport { RESPONSE_FAIL } from './actions/actionsTypes';\nimport { request } from \"./actions/request\";\nexport const API_CALL = 'API_CALL';\n/* eslint-disable */\n\n/* eslint-enable */\n// const handleError = ( errorCode ) => {\n// \tswitch( errorCode ) {\n// \t  case 404:\n//       this.props.history.push( '/404' );\n//       break;\n// \t  default:\n//       break;\n// \t}\n// }\n\nexport default (store => next => action => {\n  let api_call = action[API_CALL];\n\n  if (typeof api_call === 'undefined') {\n    return next(action);\n  }\n\n  let {\n    url,\n    method,\n    params,\n    key,\n    action_type,\n    filters,\n    main,\n    addition_keys\n  } = api_call;\n  method = method.toUpperCase();\n\n  switch (method) {\n    case 'GET':\n    case 'POST':\n      break;\n\n    default:\n      next(action);\n  }\n\n  store.dispatch(requestAction(key));\n  return request(url, method, params).then(json => {\n    if (json.error !== 0) {\n      // handleError( json.error, store.dispatch );\n      throw new Error(JSON.stringify(json));\n    }\n\n    let data = json.response.items;\n    return data;\n  }).then(json => next({\n    type: action_type,\n    response: json,\n    key\n  }), error => {\n    let message = JSON.parse(error.message);\n    return next({\n      type: RESPONSE_FAIL,\n      main: main || false,\n      error: message.error_text,\n      error_status: message.error,\n      key\n    });\n  });\n});","map":{"version":3,"sources":["/home/aziza/reactapp/src/api.js"],"names":["requestAction","RESPONSE_FAIL","request","API_CALL","store","next","action","api_call","url","method","params","key","action_type","filters","main","addition_keys","toUpperCase","dispatch","then","json","error","Error","JSON","stringify","data","response","items","type","message","parse","error_text","error_status"],"mappings":"AACA,SAASA,aAAT,QAA8B,mBAA9B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AAEP;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAeC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACzC,MAAIC,QAAQ,GAAGD,MAAM,CAACH,QAAD,CAArB;;AACA,MAAI,OAAOI,QAAP,KAAoB,WAAxB,EAAqC;AACpC,WAAOF,IAAI,CAACC,MAAD,CAAX;AACA;;AAED,MAAI;AACHE,IAAAA,GADG;AAEHC,IAAAA,MAFG;AAGHC,IAAAA,MAHG;AAIHC,IAAAA,GAJG;AAKHC,IAAAA,WALG;AAMHC,IAAAA,OANG;AAOHC,IAAAA,IAPG;AAQHC,IAAAA;AARG,MASAR,QATJ;AAWCE,EAAAA,MAAM,GAAGA,MAAM,CAACO,WAAP,EAAT;;AAGA,UAAQP,MAAR;AACI,SAAK,KAAL;AACA,SAAK,MAAL;AACI;;AACJ;AACIJ,MAAAA,IAAI,CAAEC,MAAF,CAAJ;AALR;;AAODF,EAAAA,KAAK,CAACa,QAAN,CAAgBjB,aAAa,CAAEW,GAAF,CAA7B;AACC,SAAOT,OAAO,CAACM,GAAD,EAAMC,MAAN,EAAcC,MAAd,CAAP,CAA6BQ,IAA7B,CAAkCC,IAAI,IAAI;AACjD,QAAIA,IAAI,CAACC,KAAL,KAAe,CAAnB,EAAsB;AACrB;AACA,YAAM,IAAIC,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAV,CAAN;AACA;;AAED,QAAIK,IAAI,GAAGL,IAAI,CAACM,QAAL,CAAcC,KAAzB;AAEA,WAAOF,IAAP;AACA,GATO,EASLN,IATK,CASAC,IAAI,IAAId,IAAI,CAAC;AACpBsB,IAAAA,IAAI,EAAEf,WADc;AAEpBa,IAAAA,QAAQ,EAAEN,IAFU;AAGpBR,IAAAA;AAHoB,GAAD,CATZ,EAaJS,KAAK,IAAI;AACZ,QAAIQ,OAAO,GAAGN,IAAI,CAACO,KAAL,CAAWT,KAAK,CAACQ,OAAjB,CAAd;AACA,WAAOvB,IAAI,CAAC;AACXsB,MAAAA,IAAI,EAAE1B,aADK;AAEXa,MAAAA,IAAI,EAAEA,IAAI,IAAI,KAFH;AAGXM,MAAAA,KAAK,EAAEQ,OAAO,CAACE,UAHJ;AAIXC,MAAAA,YAAY,EAAEH,OAAO,CAACR,KAJX;AAKXT,MAAAA;AALW,KAAD,CAAX;AAOA,GAtBO,CAAP;AAuBD,CAnDD","sourcesContent":["\nimport { requestAction } from './actions/actions';\nimport { RESPONSE_FAIL } from './actions/actionsTypes';\nimport { request } from \"./actions/request\";\n\nexport const API_CALL = 'API_CALL';\n\n/* eslint-disable */\n/* eslint-enable */\n// const handleError = ( errorCode ) => {\n// \tswitch( errorCode ) {\n// \t  case 404:\n//       this.props.history.push( '/404' );\n//       break;\n// \t  default:\n//       break;\n// \t}\n// }\n\nexport default store => next => action => {\n\tlet api_call = action[API_CALL];\n\tif (typeof api_call === 'undefined') {\n\t\treturn next(action);\n\t}\n\n\tlet {\n\t\turl,\n\t\tmethod,\n\t\tparams,\n\t\tkey,\n\t\taction_type,\n\t\tfilters,\n\t\tmain,\n\t\taddition_keys\n\t} = api_call;\n\n  method = method.toUpperCase();\n\n \n  switch( method ) {\n      case 'GET':\n      case 'POST':\n          break;\n      default:\n          next( action );\n  }\n\tstore.dispatch( requestAction( key ) );\n  return request(url, method, params).then(json => {\n\t\tif (json.error !== 0) {\n\t\t\t// handleError( json.error, store.dispatch );\n\t\t\tthrow new Error(JSON.stringify(json));\n\t\t}\n\n\t\tlet data = json.response.items;\n\t\t\n\t\treturn data;\n\t}).then(json => next({\n\t\ttype: action_type,\n\t\tresponse: json,\n\t\tkey,\n\t}), error => {\n\t\tlet message = JSON.parse(error.message);\n\t\treturn next({\n\t\t\ttype: RESPONSE_FAIL,\n\t\t\tmain: main || false,\n\t\t\terror: message.error_text,\n\t\t\terror_status: message.error,\n\t\t\tkey,\n\t\t});\n\t})\n}\n"]},"metadata":{},"sourceType":"module"}